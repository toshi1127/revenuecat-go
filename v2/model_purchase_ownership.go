/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// PurchaseOwnership - Ownership of the purchase
type PurchaseOwnership struct {
	Ownership *Ownership
}

// OwnershipAsPurchaseOwnership is a convenience function that returns Ownership wrapped in PurchaseOwnership
func OwnershipAsPurchaseOwnership(v *Ownership) PurchaseOwnership {
	return PurchaseOwnership{
		Ownership: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PurchaseOwnership) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Ownership
	err = newStrictDecoder(data).Decode(&dst.Ownership)
	if err == nil {
		jsonOwnership, _ := json.Marshal(dst.Ownership)
		if string(jsonOwnership) == "{}" { // empty struct
			dst.Ownership = nil
		} else {
			match++
		}
	} else {
		dst.Ownership = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Ownership = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PurchaseOwnership)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PurchaseOwnership)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PurchaseOwnership) MarshalJSON() ([]byte, error) {
	if src.Ownership != nil {
		return json.Marshal(&src.Ownership)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PurchaseOwnership) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Ownership != nil {
		return obj.Ownership
	}

	// all schemas are nil
	return nil
}

type NullablePurchaseOwnership struct {
	value *PurchaseOwnership
	isSet bool
}

func (v NullablePurchaseOwnership) Get() *PurchaseOwnership {
	return v.value
}

func (v *NullablePurchaseOwnership) Set(val *PurchaseOwnership) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOwnership) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOwnership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOwnership(val *PurchaseOwnership) *NullablePurchaseOwnership {
	return &NullablePurchaseOwnership{value: val, isSet: true}
}

func (v NullablePurchaseOwnership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOwnership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


