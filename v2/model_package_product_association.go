/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PackageProductAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageProductAssociation{}

// PackageProductAssociation struct for PackageProductAssociation
type PackageProductAssociation struct {
	Product Product `json:"product"`
	EligibilityCriteria EligibilityCriteria `json:"eligibility_criteria"`
}

type _PackageProductAssociation PackageProductAssociation

// NewPackageProductAssociation instantiates a new PackageProductAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageProductAssociation(product Product, eligibilityCriteria EligibilityCriteria) *PackageProductAssociation {
	this := PackageProductAssociation{}
	this.Product = product
	this.EligibilityCriteria = eligibilityCriteria
	return &this
}

// NewPackageProductAssociationWithDefaults instantiates a new PackageProductAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageProductAssociationWithDefaults() *PackageProductAssociation {
	this := PackageProductAssociation{}
	return &this
}

// GetProduct returns the Product field value
func (o *PackageProductAssociation) GetProduct() Product {
	if o == nil {
		var ret Product
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *PackageProductAssociation) GetProductOk() (*Product, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *PackageProductAssociation) SetProduct(v Product) {
	o.Product = v
}

// GetEligibilityCriteria returns the EligibilityCriteria field value
func (o *PackageProductAssociation) GetEligibilityCriteria() EligibilityCriteria {
	if o == nil {
		var ret EligibilityCriteria
		return ret
	}

	return o.EligibilityCriteria
}

// GetEligibilityCriteriaOk returns a tuple with the EligibilityCriteria field value
// and a boolean to check if the value has been set.
func (o *PackageProductAssociation) GetEligibilityCriteriaOk() (*EligibilityCriteria, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EligibilityCriteria, true
}

// SetEligibilityCriteria sets field value
func (o *PackageProductAssociation) SetEligibilityCriteria(v EligibilityCriteria) {
	o.EligibilityCriteria = v
}

func (o PackageProductAssociation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageProductAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product"] = o.Product
	toSerialize["eligibility_criteria"] = o.EligibilityCriteria
	return toSerialize, nil
}

func (o *PackageProductAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
		"eligibility_criteria",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPackageProductAssociation := _PackageProductAssociation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPackageProductAssociation)

	if err != nil {
		return err
	}

	*o = PackageProductAssociation(varPackageProductAssociation)

	return err
}

type NullablePackageProductAssociation struct {
	value *PackageProductAssociation
	isSet bool
}

func (v NullablePackageProductAssociation) Get() *PackageProductAssociation {
	return v.value
}

func (v *NullablePackageProductAssociation) Set(val *PackageProductAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageProductAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageProductAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageProductAssociation(val *PackageProductAssociation) *NullablePackageProductAssociation {
	return &NullablePackageProductAssociation{value: val, isSet: true}
}

func (v NullablePackageProductAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageProductAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


