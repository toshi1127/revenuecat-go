/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Purchase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Purchase{}

// Purchase struct for Purchase
type Purchase struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The id of the purchase
	Id string `json:"id"`
	// The id of the customer
	CustomerId string `json:"customer_id"`
	// The ID of the original customer
	OriginalCustomerId string `json:"original_customer_id"`
	// The ID of the product that was purchased
	ProductId string `json:"product_id"`
	// The date when the purchase was made in ms since epoch
	PurchasedAt int64 `json:"purchased_at"`
	RevenueInUsd MonetaryAmount `json:"revenue_in_usd"`
	// The quantity of the product purchased in one transaction
	Quantity int32 `json:"quantity"`
	// The status of a purchase
	Status string `json:"status"`
	// The ID of the offering the customer saw when they did the purchase
	PresentedOfferingId NullableString `json:"presented_offering_id"`
	Entitlements EntitlementList `json:"entitlements"`
	Environment Environment `json:"environment"`
	// Store the purchase belongs to
	Store string `json:"store"`
	// The store purchase identifier
	StorePurchaseIdentifier string `json:"store_purchase_identifier"`
	Ownership Ownership `json:"ownership"`
	Country NullableCountry `json:"country,omitempty"`
}

type _Purchase Purchase

// NewPurchase instantiates a new Purchase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchase(object string, id string, customerId string, originalCustomerId string, productId string, purchasedAt int64, revenueInUsd MonetaryAmount, quantity int32, status string, presentedOfferingId NullableString, entitlements EntitlementList, environment Environment, store string, storePurchaseIdentifier string, ownership Ownership) *Purchase {
	this := Purchase{}
	this.Object = object
	this.Id = id
	this.CustomerId = customerId
	this.OriginalCustomerId = originalCustomerId
	this.ProductId = productId
	this.PurchasedAt = purchasedAt
	this.RevenueInUsd = revenueInUsd
	this.Quantity = quantity
	this.Status = status
	this.PresentedOfferingId = presentedOfferingId
	this.Entitlements = entitlements
	this.Environment = environment
	this.Store = store
	this.StorePurchaseIdentifier = storePurchaseIdentifier
	this.Ownership = ownership
	return &this
}

// NewPurchaseWithDefaults instantiates a new Purchase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseWithDefaults() *Purchase {
	this := Purchase{}
	return &this
}

// GetObject returns the Object field value
func (o *Purchase) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Purchase) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Purchase) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Purchase) SetId(v string) {
	o.Id = v
}

// GetCustomerId returns the CustomerId field value
func (o *Purchase) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *Purchase) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetOriginalCustomerId returns the OriginalCustomerId field value
func (o *Purchase) GetOriginalCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalCustomerId
}

// GetOriginalCustomerIdOk returns a tuple with the OriginalCustomerId field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetOriginalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalCustomerId, true
}

// SetOriginalCustomerId sets field value
func (o *Purchase) SetOriginalCustomerId(v string) {
	o.OriginalCustomerId = v
}

// GetProductId returns the ProductId field value
func (o *Purchase) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *Purchase) SetProductId(v string) {
	o.ProductId = v
}

// GetPurchasedAt returns the PurchasedAt field value
func (o *Purchase) GetPurchasedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PurchasedAt
}

// GetPurchasedAtOk returns a tuple with the PurchasedAt field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetPurchasedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchasedAt, true
}

// SetPurchasedAt sets field value
func (o *Purchase) SetPurchasedAt(v int64) {
	o.PurchasedAt = v
}

// GetRevenueInUsd returns the RevenueInUsd field value
func (o *Purchase) GetRevenueInUsd() MonetaryAmount {
	if o == nil {
		var ret MonetaryAmount
		return ret
	}

	return o.RevenueInUsd
}

// GetRevenueInUsdOk returns a tuple with the RevenueInUsd field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetRevenueInUsdOk() (*MonetaryAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevenueInUsd, true
}

// SetRevenueInUsd sets field value
func (o *Purchase) SetRevenueInUsd(v MonetaryAmount) {
	o.RevenueInUsd = v
}

// GetQuantity returns the Quantity field value
func (o *Purchase) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *Purchase) SetQuantity(v int32) {
	o.Quantity = v
}

// GetStatus returns the Status field value
func (o *Purchase) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Purchase) SetStatus(v string) {
	o.Status = v
}

// GetPresentedOfferingId returns the PresentedOfferingId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Purchase) GetPresentedOfferingId() string {
	if o == nil || o.PresentedOfferingId.Get() == nil {
		var ret string
		return ret
	}

	return *o.PresentedOfferingId.Get()
}

// GetPresentedOfferingIdOk returns a tuple with the PresentedOfferingId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Purchase) GetPresentedOfferingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PresentedOfferingId.Get(), o.PresentedOfferingId.IsSet()
}

// SetPresentedOfferingId sets field value
func (o *Purchase) SetPresentedOfferingId(v string) {
	o.PresentedOfferingId.Set(&v)
}

// GetEntitlements returns the Entitlements field value
func (o *Purchase) GetEntitlements() EntitlementList {
	if o == nil {
		var ret EntitlementList
		return ret
	}

	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetEntitlementsOk() (*EntitlementList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entitlements, true
}

// SetEntitlements sets field value
func (o *Purchase) SetEntitlements(v EntitlementList) {
	o.Entitlements = v
}

// GetEnvironment returns the Environment field value
func (o *Purchase) GetEnvironment() Environment {
	if o == nil {
		var ret Environment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetEnvironmentOk() (*Environment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *Purchase) SetEnvironment(v Environment) {
	o.Environment = v
}

// GetStore returns the Store field value
func (o *Purchase) GetStore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Store
}

// GetStoreOk returns a tuple with the Store field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetStoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Store, true
}

// SetStore sets field value
func (o *Purchase) SetStore(v string) {
	o.Store = v
}

// GetStorePurchaseIdentifier returns the StorePurchaseIdentifier field value
func (o *Purchase) GetStorePurchaseIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorePurchaseIdentifier
}

// GetStorePurchaseIdentifierOk returns a tuple with the StorePurchaseIdentifier field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetStorePurchaseIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorePurchaseIdentifier, true
}

// SetStorePurchaseIdentifier sets field value
func (o *Purchase) SetStorePurchaseIdentifier(v string) {
	o.StorePurchaseIdentifier = v
}

// GetOwnership returns the Ownership field value
func (o *Purchase) GetOwnership() Ownership {
	if o == nil {
		var ret Ownership
		return ret
	}

	return o.Ownership
}

// GetOwnershipOk returns a tuple with the Ownership field value
// and a boolean to check if the value has been set.
func (o *Purchase) GetOwnershipOk() (*Ownership, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ownership, true
}

// SetOwnership sets field value
func (o *Purchase) SetOwnership(v Ownership) {
	o.Ownership = v
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Purchase) GetCountry() Country {
	if o == nil || IsNil(o.Country.Get()) {
		var ret Country
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Purchase) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Purchase) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableCountry and assigns it to the Country field.
func (o *Purchase) SetCountry(v Country) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *Purchase) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Purchase) UnsetCountry() {
	o.Country.Unset()
}

func (o Purchase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Purchase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["original_customer_id"] = o.OriginalCustomerId
	toSerialize["product_id"] = o.ProductId
	toSerialize["purchased_at"] = o.PurchasedAt
	toSerialize["revenue_in_usd"] = o.RevenueInUsd
	toSerialize["quantity"] = o.Quantity
	toSerialize["status"] = o.Status
	toSerialize["presented_offering_id"] = o.PresentedOfferingId.Get()
	toSerialize["entitlements"] = o.Entitlements
	toSerialize["environment"] = o.Environment
	toSerialize["store"] = o.Store
	toSerialize["store_purchase_identifier"] = o.StorePurchaseIdentifier
	toSerialize["ownership"] = o.Ownership
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	return toSerialize, nil
}

func (o *Purchase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"customer_id",
		"original_customer_id",
		"product_id",
		"purchased_at",
		"revenue_in_usd",
		"quantity",
		"status",
		"presented_offering_id",
		"entitlements",
		"environment",
		"store",
		"store_purchase_identifier",
		"ownership",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurchase := _Purchase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPurchase)

	if err != nil {
		return err
	}

	*o = Purchase(varPurchase)

	return err
}

type NullablePurchase struct {
	value *Purchase
	isSet bool
}

func (v NullablePurchase) Get() *Purchase {
	return v.value
}

func (v *NullablePurchase) Set(val *Purchase) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchase) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchase(val *Purchase) *NullablePurchase {
	return &NullablePurchase{value: val, isSet: true}
}

func (v NullablePurchase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


