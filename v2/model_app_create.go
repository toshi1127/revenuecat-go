/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppCreate{}

// AppCreate struct for AppCreate
type AppCreate struct {
	Amazon *AmazonAppCreateAmazon `json:"amazon,omitempty"`
	AppStore *AppStoreAppCreateAppStore `json:"app_store,omitempty"`
	MacAppStore *MacAppStoreAppCreateMacAppStore `json:"mac_app_store,omitempty"`
	PlayStore *UpdateAppRequestPlayStore `json:"play_store,omitempty"`
	Stripe *StripeAppCreateStripe `json:"stripe,omitempty"`
	RcBilling NullableRCBillingAppCreateRcBilling `json:"rc_billing,omitempty"`
	Roku NullableRokuAppCreateRoku `json:"roku,omitempty"`
	Paddle NullablePaddleAppCreatePaddle `json:"paddle,omitempty"`
	// The name of the app
	Name string `json:"name"`
	// The platform of the app. Mac App Store is disabled by default. See [Legacy Mac Apps](https://www.revenuecat.com/docs/legacy-mac-apps) for more details. 
	Type string `json:"type"`
}

type _AppCreate AppCreate

// NewAppCreate instantiates a new AppCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppCreate(name string, type_ string) *AppCreate {
	this := AppCreate{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewAppCreateWithDefaults instantiates a new AppCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppCreateWithDefaults() *AppCreate {
	this := AppCreate{}
	return &this
}

// GetAmazon returns the Amazon field value if set, zero value otherwise.
func (o *AppCreate) GetAmazon() AmazonAppCreateAmazon {
	if o == nil || IsNil(o.Amazon) {
		var ret AmazonAppCreateAmazon
		return ret
	}
	return *o.Amazon
}

// GetAmazonOk returns a tuple with the Amazon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreate) GetAmazonOk() (*AmazonAppCreateAmazon, bool) {
	if o == nil || IsNil(o.Amazon) {
		return nil, false
	}
	return o.Amazon, true
}

// HasAmazon returns a boolean if a field has been set.
func (o *AppCreate) HasAmazon() bool {
	if o != nil && !IsNil(o.Amazon) {
		return true
	}

	return false
}

// SetAmazon gets a reference to the given AmazonAppCreateAmazon and assigns it to the Amazon field.
func (o *AppCreate) SetAmazon(v AmazonAppCreateAmazon) {
	o.Amazon = &v
}

// GetAppStore returns the AppStore field value if set, zero value otherwise.
func (o *AppCreate) GetAppStore() AppStoreAppCreateAppStore {
	if o == nil || IsNil(o.AppStore) {
		var ret AppStoreAppCreateAppStore
		return ret
	}
	return *o.AppStore
}

// GetAppStoreOk returns a tuple with the AppStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreate) GetAppStoreOk() (*AppStoreAppCreateAppStore, bool) {
	if o == nil || IsNil(o.AppStore) {
		return nil, false
	}
	return o.AppStore, true
}

// HasAppStore returns a boolean if a field has been set.
func (o *AppCreate) HasAppStore() bool {
	if o != nil && !IsNil(o.AppStore) {
		return true
	}

	return false
}

// SetAppStore gets a reference to the given AppStoreAppCreateAppStore and assigns it to the AppStore field.
func (o *AppCreate) SetAppStore(v AppStoreAppCreateAppStore) {
	o.AppStore = &v
}

// GetMacAppStore returns the MacAppStore field value if set, zero value otherwise.
func (o *AppCreate) GetMacAppStore() MacAppStoreAppCreateMacAppStore {
	if o == nil || IsNil(o.MacAppStore) {
		var ret MacAppStoreAppCreateMacAppStore
		return ret
	}
	return *o.MacAppStore
}

// GetMacAppStoreOk returns a tuple with the MacAppStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreate) GetMacAppStoreOk() (*MacAppStoreAppCreateMacAppStore, bool) {
	if o == nil || IsNil(o.MacAppStore) {
		return nil, false
	}
	return o.MacAppStore, true
}

// HasMacAppStore returns a boolean if a field has been set.
func (o *AppCreate) HasMacAppStore() bool {
	if o != nil && !IsNil(o.MacAppStore) {
		return true
	}

	return false
}

// SetMacAppStore gets a reference to the given MacAppStoreAppCreateMacAppStore and assigns it to the MacAppStore field.
func (o *AppCreate) SetMacAppStore(v MacAppStoreAppCreateMacAppStore) {
	o.MacAppStore = &v
}

// GetPlayStore returns the PlayStore field value if set, zero value otherwise.
func (o *AppCreate) GetPlayStore() UpdateAppRequestPlayStore {
	if o == nil || IsNil(o.PlayStore) {
		var ret UpdateAppRequestPlayStore
		return ret
	}
	return *o.PlayStore
}

// GetPlayStoreOk returns a tuple with the PlayStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreate) GetPlayStoreOk() (*UpdateAppRequestPlayStore, bool) {
	if o == nil || IsNil(o.PlayStore) {
		return nil, false
	}
	return o.PlayStore, true
}

// HasPlayStore returns a boolean if a field has been set.
func (o *AppCreate) HasPlayStore() bool {
	if o != nil && !IsNil(o.PlayStore) {
		return true
	}

	return false
}

// SetPlayStore gets a reference to the given UpdateAppRequestPlayStore and assigns it to the PlayStore field.
func (o *AppCreate) SetPlayStore(v UpdateAppRequestPlayStore) {
	o.PlayStore = &v
}

// GetStripe returns the Stripe field value if set, zero value otherwise.
func (o *AppCreate) GetStripe() StripeAppCreateStripe {
	if o == nil || IsNil(o.Stripe) {
		var ret StripeAppCreateStripe
		return ret
	}
	return *o.Stripe
}

// GetStripeOk returns a tuple with the Stripe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreate) GetStripeOk() (*StripeAppCreateStripe, bool) {
	if o == nil || IsNil(o.Stripe) {
		return nil, false
	}
	return o.Stripe, true
}

// HasStripe returns a boolean if a field has been set.
func (o *AppCreate) HasStripe() bool {
	if o != nil && !IsNil(o.Stripe) {
		return true
	}

	return false
}

// SetStripe gets a reference to the given StripeAppCreateStripe and assigns it to the Stripe field.
func (o *AppCreate) SetStripe(v StripeAppCreateStripe) {
	o.Stripe = &v
}

// GetRcBilling returns the RcBilling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppCreate) GetRcBilling() RCBillingAppCreateRcBilling {
	if o == nil || IsNil(o.RcBilling.Get()) {
		var ret RCBillingAppCreateRcBilling
		return ret
	}
	return *o.RcBilling.Get()
}

// GetRcBillingOk returns a tuple with the RcBilling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppCreate) GetRcBillingOk() (*RCBillingAppCreateRcBilling, bool) {
	if o == nil {
		return nil, false
	}
	return o.RcBilling.Get(), o.RcBilling.IsSet()
}

// HasRcBilling returns a boolean if a field has been set.
func (o *AppCreate) HasRcBilling() bool {
	if o != nil && o.RcBilling.IsSet() {
		return true
	}

	return false
}

// SetRcBilling gets a reference to the given NullableRCBillingAppCreateRcBilling and assigns it to the RcBilling field.
func (o *AppCreate) SetRcBilling(v RCBillingAppCreateRcBilling) {
	o.RcBilling.Set(&v)
}
// SetRcBillingNil sets the value for RcBilling to be an explicit nil
func (o *AppCreate) SetRcBillingNil() {
	o.RcBilling.Set(nil)
}

// UnsetRcBilling ensures that no value is present for RcBilling, not even an explicit nil
func (o *AppCreate) UnsetRcBilling() {
	o.RcBilling.Unset()
}

// GetRoku returns the Roku field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppCreate) GetRoku() RokuAppCreateRoku {
	if o == nil || IsNil(o.Roku.Get()) {
		var ret RokuAppCreateRoku
		return ret
	}
	return *o.Roku.Get()
}

// GetRokuOk returns a tuple with the Roku field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppCreate) GetRokuOk() (*RokuAppCreateRoku, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roku.Get(), o.Roku.IsSet()
}

// HasRoku returns a boolean if a field has been set.
func (o *AppCreate) HasRoku() bool {
	if o != nil && o.Roku.IsSet() {
		return true
	}

	return false
}

// SetRoku gets a reference to the given NullableRokuAppCreateRoku and assigns it to the Roku field.
func (o *AppCreate) SetRoku(v RokuAppCreateRoku) {
	o.Roku.Set(&v)
}
// SetRokuNil sets the value for Roku to be an explicit nil
func (o *AppCreate) SetRokuNil() {
	o.Roku.Set(nil)
}

// UnsetRoku ensures that no value is present for Roku, not even an explicit nil
func (o *AppCreate) UnsetRoku() {
	o.Roku.Unset()
}

// GetPaddle returns the Paddle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppCreate) GetPaddle() PaddleAppCreatePaddle {
	if o == nil || IsNil(o.Paddle.Get()) {
		var ret PaddleAppCreatePaddle
		return ret
	}
	return *o.Paddle.Get()
}

// GetPaddleOk returns a tuple with the Paddle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppCreate) GetPaddleOk() (*PaddleAppCreatePaddle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paddle.Get(), o.Paddle.IsSet()
}

// HasPaddle returns a boolean if a field has been set.
func (o *AppCreate) HasPaddle() bool {
	if o != nil && o.Paddle.IsSet() {
		return true
	}

	return false
}

// SetPaddle gets a reference to the given NullablePaddleAppCreatePaddle and assigns it to the Paddle field.
func (o *AppCreate) SetPaddle(v PaddleAppCreatePaddle) {
	o.Paddle.Set(&v)
}
// SetPaddleNil sets the value for Paddle to be an explicit nil
func (o *AppCreate) SetPaddleNil() {
	o.Paddle.Set(nil)
}

// UnsetPaddle ensures that no value is present for Paddle, not even an explicit nil
func (o *AppCreate) UnsetPaddle() {
	o.Paddle.Unset()
}

// GetName returns the Name field value
func (o *AppCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppCreate) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *AppCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AppCreate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AppCreate) SetType(v string) {
	o.Type = v
}

func (o AppCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amazon) {
		toSerialize["amazon"] = o.Amazon
	}
	if !IsNil(o.AppStore) {
		toSerialize["app_store"] = o.AppStore
	}
	if !IsNil(o.MacAppStore) {
		toSerialize["mac_app_store"] = o.MacAppStore
	}
	if !IsNil(o.PlayStore) {
		toSerialize["play_store"] = o.PlayStore
	}
	if !IsNil(o.Stripe) {
		toSerialize["stripe"] = o.Stripe
	}
	if o.RcBilling.IsSet() {
		toSerialize["rc_billing"] = o.RcBilling.Get()
	}
	if o.Roku.IsSet() {
		toSerialize["roku"] = o.Roku.Get()
	}
	if o.Paddle.IsSet() {
		toSerialize["paddle"] = o.Paddle.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AppCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppCreate := _AppCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppCreate)

	if err != nil {
		return err
	}

	*o = AppCreate(varAppCreate)

	return err
}

type NullableAppCreate struct {
	value *AppCreate
	isSet bool
}

func (v NullableAppCreate) Get() *AppCreate {
	return v.value
}

func (v *NullableAppCreate) Set(val *AppCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAppCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAppCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppCreate(val *AppCreate) *NullableAppCreate {
	return &NullableAppCreate{value: val, isSet: true}
}

func (v NullableAppCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


