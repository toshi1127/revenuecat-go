/*
Developer API

Testing OfferingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package revenuecat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/toshi1127/go-revenuecat/revenuecat"
)

func Test_revenuecat_OfferingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OfferingAPIService CreateOffering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.OfferingAPI.CreateOffering(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferingAPIService DeleteOffering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var offeringId string

		resp, httpRes, err := apiClient.OfferingAPI.DeleteOffering(context.Background(), projectId, offeringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferingAPIService GetOffering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var offeringId string

		resp, httpRes, err := apiClient.OfferingAPI.GetOffering(context.Background(), projectId, offeringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferingAPIService ListOfferings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.OfferingAPI.ListOfferings(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferingAPIService UpdateOffering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var offeringId string

		resp, httpRes, err := apiClient.OfferingAPI.UpdateOffering(context.Background(), projectId, offeringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
