/*
Developer API

Testing SubscriptionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package revenuecat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/toshi1127/go-revenuecat/revenuecat"
)

func Test_revenuecat_SubscriptionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubscriptionAPIService CancelSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.CancelSubscription(context.Background(), projectId, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService GetAuthorizedSubscriptionManagementUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.GetAuthorizedSubscriptionManagementUrl(context.Background(), projectId, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService GetPlayStoreSubscriptionTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.GetPlayStoreSubscriptionTransactions(context.Background(), projectId, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService GetSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.GetSubscription(context.Background(), projectId, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService ListSubscriptionEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.ListSubscriptionEntitlements(context.Background(), projectId, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService RefundPlayStoreSubscriptionTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string
		var transactionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.RefundPlayStoreSubscriptionTransaction(context.Background(), projectId, subscriptionId, transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService RefundSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var subscriptionId string

		resp, httpRes, err := apiClient.SubscriptionAPI.RefundSubscription(context.Background(), projectId, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionAPIService SearchSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.SubscriptionAPI.SearchSubscriptions(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
