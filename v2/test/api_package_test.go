/*
Developer API

Testing PackageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/toshi1127/revenuecat-go/revenuecat"
)

func Test_revenuecat_PackageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PackageAPIService AttachProductsToPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var packageId string

		resp, httpRes, err := apiClient.PackageAPI.AttachProductsToPackage(context.Background(), projectId, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService CreatePackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var offeringId string

		resp, httpRes, err := apiClient.PackageAPI.CreatePackages(context.Background(), projectId, offeringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService DeletePackageFromOffering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var packageId string

		resp, httpRes, err := apiClient.PackageAPI.DeletePackageFromOffering(context.Background(), projectId, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService DetachProductsFromPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var packageId string

		resp, httpRes, err := apiClient.PackageAPI.DetachProductsFromPackage(context.Background(), projectId, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService GetPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var packageId string

		resp, httpRes, err := apiClient.PackageAPI.GetPackage(context.Background(), projectId, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService GetProductsFromPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var packageId string

		resp, httpRes, err := apiClient.PackageAPI.GetProductsFromPackage(context.Background(), projectId, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService ListPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var offeringId string

		resp, httpRes, err := apiClient.PackageAPI.ListPackages(context.Background(), projectId, offeringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PackageAPIService UpdatePackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var packageId string

		resp, httpRes, err := apiClient.PackageAPI.UpdatePackage(context.Background(), projectId, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
