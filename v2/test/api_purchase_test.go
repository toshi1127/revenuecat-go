/*
Developer API

Testing PurchaseAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/toshi1127/revenuecat-go/revenuecat"
)

func Test_revenuecat_PurchaseAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PurchaseAPIService GetPurchase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var purchaseId string

		resp, httpRes, err := apiClient.PurchaseAPI.GetPurchase(context.Background(), projectId, purchaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseAPIService ListPurchaseEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var purchaseId string

		resp, httpRes, err := apiClient.PurchaseAPI.ListPurchaseEntitlements(context.Background(), projectId, purchaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseAPIService RefundPurchase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var purchaseId string

		resp, httpRes, err := apiClient.PurchaseAPI.RefundPurchase(context.Background(), projectId, purchaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseAPIService SearchPurchases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.PurchaseAPI.SearchPurchases(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
