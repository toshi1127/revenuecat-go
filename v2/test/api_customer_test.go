/*
Developer API

Testing CustomerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package revenuecat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/toshi1127/go-revenuecat/revenuecat"
)

func Test_revenuecat_CustomerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomerAPIService CreateCustomer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CustomerAPI.CreateCustomer(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService CreateVirtualCurrenciesTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.CreateVirtualCurrenciesTransaction(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService DeleteCustomer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.DeleteCustomer(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService GetCustomer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.GetCustomer(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListCustomerActiveEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.ListCustomerActiveEntitlements(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListCustomerAliases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.ListCustomerAliases(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListCustomerAttributes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.ListCustomerAttributes(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListCustomers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CustomerAPI.ListCustomers(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListPurchases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.ListPurchases(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.ListSubscriptions(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService ListVirtualCurrenciesBalances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.ListVirtualCurrenciesBalances(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService SetCustomerAttributes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.SetCustomerAttributes(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService TransferCustomerData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.TransferCustomerData(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerAPIService UpdateVirtualCurrenciesBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var customerId string

		resp, httpRes, err := apiClient.CustomerAPI.UpdateVirtualCurrenciesBalance(context.Background(), projectId, customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
