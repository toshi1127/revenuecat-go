/*
Developer API

Testing EntitlementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package revenuecat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/toshi1127/revenuecat-go/revenuecat"
)

func Test_revenuecat_EntitlementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EntitlementAPIService AttachProductsToEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var entitlementId string

		resp, httpRes, err := apiClient.EntitlementAPI.AttachProductsToEntitlement(context.Background(), projectId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService CreateEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.EntitlementAPI.CreateEntitlement(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService DeleteEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var entitlementId string

		resp, httpRes, err := apiClient.EntitlementAPI.DeleteEntitlement(context.Background(), projectId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService DetachProductsFromEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var entitlementId string

		resp, httpRes, err := apiClient.EntitlementAPI.DetachProductsFromEntitlement(context.Background(), projectId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService GetEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var entitlementId string

		resp, httpRes, err := apiClient.EntitlementAPI.GetEntitlement(context.Background(), projectId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService GetProductsFromEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var entitlementId string

		resp, httpRes, err := apiClient.EntitlementAPI.GetProductsFromEntitlement(context.Background(), projectId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService ListEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.EntitlementAPI.ListEntitlements(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementAPIService UpdateEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var entitlementId string

		resp, httpRes, err := apiClient.EntitlementAPI.UpdateEntitlement(context.Background(), projectId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
