/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Entitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entitlement{}

// Entitlement struct for Entitlement
type Entitlement struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// ID of the project to which the entitlement belongs
	ProjectId string `json:"project_id"`
	// The id of the entitlement
	Id string `json:"id"`
	// A custom identifier of the entitlement
	LookupKey string `json:"lookup_key"`
	// The display name of the entitlement
	DisplayName string `json:"display_name"`
	// The date when the entitlement was created in ms since epoch
	CreatedAt int64 `json:"created_at"`
	Products NullableProductsList `json:"products,omitempty"`
}

type _Entitlement Entitlement

// NewEntitlement instantiates a new Entitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlement(object string, projectId string, id string, lookupKey string, displayName string, createdAt int64) *Entitlement {
	this := Entitlement{}
	this.Object = object
	this.ProjectId = projectId
	this.Id = id
	this.LookupKey = lookupKey
	this.DisplayName = displayName
	this.CreatedAt = createdAt
	return &this
}

// NewEntitlementWithDefaults instantiates a new Entitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementWithDefaults() *Entitlement {
	this := Entitlement{}
	return &this
}

// GetObject returns the Object field value
func (o *Entitlement) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Entitlement) SetObject(v string) {
	o.Object = v
}

// GetProjectId returns the ProjectId field value
func (o *Entitlement) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Entitlement) SetProjectId(v string) {
	o.ProjectId = v
}

// GetId returns the Id field value
func (o *Entitlement) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Entitlement) SetId(v string) {
	o.Id = v
}

// GetLookupKey returns the LookupKey field value
func (o *Entitlement) GetLookupKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetLookupKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LookupKey, true
}

// SetLookupKey sets field value
func (o *Entitlement) SetLookupKey(v string) {
	o.LookupKey = v
}

// GetDisplayName returns the DisplayName field value
func (o *Entitlement) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Entitlement) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Entitlement) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Entitlement) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetProducts returns the Products field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Entitlement) GetProducts() ProductsList {
	if o == nil || IsNil(o.Products.Get()) {
		var ret ProductsList
		return ret
	}
	return *o.Products.Get()
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entitlement) GetProductsOk() (*ProductsList, bool) {
	if o == nil {
		return nil, false
	}
	return o.Products.Get(), o.Products.IsSet()
}

// HasProducts returns a boolean if a field has been set.
func (o *Entitlement) HasProducts() bool {
	if o != nil && o.Products.IsSet() {
		return true
	}

	return false
}

// SetProducts gets a reference to the given NullableProductsList and assigns it to the Products field.
func (o *Entitlement) SetProducts(v ProductsList) {
	o.Products.Set(&v)
}
// SetProductsNil sets the value for Products to be an explicit nil
func (o *Entitlement) SetProductsNil() {
	o.Products.Set(nil)
}

// UnsetProducts ensures that no value is present for Products, not even an explicit nil
func (o *Entitlement) UnsetProducts() {
	o.Products.Unset()
}

func (o Entitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["project_id"] = o.ProjectId
	toSerialize["id"] = o.Id
	toSerialize["lookup_key"] = o.LookupKey
	toSerialize["display_name"] = o.DisplayName
	toSerialize["created_at"] = o.CreatedAt
	if o.Products.IsSet() {
		toSerialize["products"] = o.Products.Get()
	}
	return toSerialize, nil
}

func (o *Entitlement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"project_id",
		"id",
		"lookup_key",
		"display_name",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntitlement := _Entitlement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntitlement)

	if err != nil {
		return err
	}

	*o = Entitlement(varEntitlement)

	return err
}

type NullableEntitlement struct {
	value *Entitlement
	isSet bool
}

func (v NullableEntitlement) Get() *Entitlement {
	return v.value
}

func (v *NullableEntitlement) Set(val *Entitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlement(val *Entitlement) *NullableEntitlement {
	return &NullableEntitlement{value: val, isSet: true}
}

func (v NullableEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


