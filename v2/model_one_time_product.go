/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OneTimeProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OneTimeProduct{}

// OneTimeProduct struct for OneTimeProduct
type OneTimeProduct struct {
	// Indicates whether the product is consumable or not.
	IsConsumable NullableBool `json:"is_consumable"`
}

type _OneTimeProduct OneTimeProduct

// NewOneTimeProduct instantiates a new OneTimeProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneTimeProduct(isConsumable NullableBool) *OneTimeProduct {
	this := OneTimeProduct{}
	this.IsConsumable = isConsumable
	return &this
}

// NewOneTimeProductWithDefaults instantiates a new OneTimeProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneTimeProductWithDefaults() *OneTimeProduct {
	this := OneTimeProduct{}
	return &this
}

// GetIsConsumable returns the IsConsumable field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *OneTimeProduct) GetIsConsumable() bool {
	if o == nil || o.IsConsumable.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsConsumable.Get()
}

// GetIsConsumableOk returns a tuple with the IsConsumable field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneTimeProduct) GetIsConsumableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsConsumable.Get(), o.IsConsumable.IsSet()
}

// SetIsConsumable sets field value
func (o *OneTimeProduct) SetIsConsumable(v bool) {
	o.IsConsumable.Set(&v)
}

func (o OneTimeProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OneTimeProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_consumable"] = o.IsConsumable.Get()
	return toSerialize, nil
}

func (o *OneTimeProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_consumable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOneTimeProduct := _OneTimeProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOneTimeProduct)

	if err != nil {
		return err
	}

	*o = OneTimeProduct(varOneTimeProduct)

	return err
}

type NullableOneTimeProduct struct {
	value *OneTimeProduct
	isSet bool
}

func (v NullableOneTimeProduct) Get() *OneTimeProduct {
	return v.value
}

func (v *NullableOneTimeProduct) Set(val *OneTimeProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableOneTimeProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableOneTimeProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneTimeProduct(val *OneTimeProduct) *NullableOneTimeProduct {
	return &NullableOneTimeProduct{value: val, isSet: true}
}

func (v NullableOneTimeProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneTimeProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


