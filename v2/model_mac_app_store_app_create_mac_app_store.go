/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MacAppStoreAppCreateMacAppStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MacAppStoreAppCreateMacAppStore{}

// MacAppStoreAppCreateMacAppStore Mac App Store type details. Should only be used when type is mac_app_store.
type MacAppStoreAppCreateMacAppStore struct {
	// The bundle ID of the app
	BundleId string `json:"bundle_id"`
	// The shared secret of the app
	SharedSecret *string `json:"shared_secret,omitempty"`
}

type _MacAppStoreAppCreateMacAppStore MacAppStoreAppCreateMacAppStore

// NewMacAppStoreAppCreateMacAppStore instantiates a new MacAppStoreAppCreateMacAppStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMacAppStoreAppCreateMacAppStore(bundleId string) *MacAppStoreAppCreateMacAppStore {
	this := MacAppStoreAppCreateMacAppStore{}
	this.BundleId = bundleId
	return &this
}

// NewMacAppStoreAppCreateMacAppStoreWithDefaults instantiates a new MacAppStoreAppCreateMacAppStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMacAppStoreAppCreateMacAppStoreWithDefaults() *MacAppStoreAppCreateMacAppStore {
	this := MacAppStoreAppCreateMacAppStore{}
	return &this
}

// GetBundleId returns the BundleId field value
func (o *MacAppStoreAppCreateMacAppStore) GetBundleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value
// and a boolean to check if the value has been set.
func (o *MacAppStoreAppCreateMacAppStore) GetBundleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BundleId, true
}

// SetBundleId sets field value
func (o *MacAppStoreAppCreateMacAppStore) SetBundleId(v string) {
	o.BundleId = v
}

// GetSharedSecret returns the SharedSecret field value if set, zero value otherwise.
func (o *MacAppStoreAppCreateMacAppStore) GetSharedSecret() string {
	if o == nil || IsNil(o.SharedSecret) {
		var ret string
		return ret
	}
	return *o.SharedSecret
}

// GetSharedSecretOk returns a tuple with the SharedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacAppStoreAppCreateMacAppStore) GetSharedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SharedSecret) {
		return nil, false
	}
	return o.SharedSecret, true
}

// HasSharedSecret returns a boolean if a field has been set.
func (o *MacAppStoreAppCreateMacAppStore) HasSharedSecret() bool {
	if o != nil && !IsNil(o.SharedSecret) {
		return true
	}

	return false
}

// SetSharedSecret gets a reference to the given string and assigns it to the SharedSecret field.
func (o *MacAppStoreAppCreateMacAppStore) SetSharedSecret(v string) {
	o.SharedSecret = &v
}

func (o MacAppStoreAppCreateMacAppStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MacAppStoreAppCreateMacAppStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bundle_id"] = o.BundleId
	if !IsNil(o.SharedSecret) {
		toSerialize["shared_secret"] = o.SharedSecret
	}
	return toSerialize, nil
}

func (o *MacAppStoreAppCreateMacAppStore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bundle_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMacAppStoreAppCreateMacAppStore := _MacAppStoreAppCreateMacAppStore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMacAppStoreAppCreateMacAppStore)

	if err != nil {
		return err
	}

	*o = MacAppStoreAppCreateMacAppStore(varMacAppStoreAppCreateMacAppStore)

	return err
}

type NullableMacAppStoreAppCreateMacAppStore struct {
	value *MacAppStoreAppCreateMacAppStore
	isSet bool
}

func (v NullableMacAppStoreAppCreateMacAppStore) Get() *MacAppStoreAppCreateMacAppStore {
	return v.value
}

func (v *NullableMacAppStoreAppCreateMacAppStore) Set(val *MacAppStoreAppCreateMacAppStore) {
	v.value = val
	v.isSet = true
}

func (v NullableMacAppStoreAppCreateMacAppStore) IsSet() bool {
	return v.isSet
}

func (v *NullableMacAppStoreAppCreateMacAppStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMacAppStoreAppCreateMacAppStore(val *MacAppStoreAppCreateMacAppStore) *NullableMacAppStoreAppCreateMacAppStore {
	return &NullableMacAppStoreAppCreateMacAppStore{value: val, isSet: true}
}

func (v NullableMacAppStoreAppCreateMacAppStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMacAppStoreAppCreateMacAppStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


