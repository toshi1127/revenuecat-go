/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// SubscriptionEnvironment - The store environment
type SubscriptionEnvironment struct {
	Environment *Environment
}

// EnvironmentAsSubscriptionEnvironment is a convenience function that returns Environment wrapped in SubscriptionEnvironment
func EnvironmentAsSubscriptionEnvironment(v *Environment) SubscriptionEnvironment {
	return SubscriptionEnvironment{
		Environment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionEnvironment) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Environment
	err = newStrictDecoder(data).Decode(&dst.Environment)
	if err == nil {
		jsonEnvironment, _ := json.Marshal(dst.Environment)
		if string(jsonEnvironment) == "{}" { // empty struct
			dst.Environment = nil
		} else {
			match++
		}
	} else {
		dst.Environment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Environment = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SubscriptionEnvironment)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SubscriptionEnvironment)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionEnvironment) MarshalJSON() ([]byte, error) {
	if src.Environment != nil {
		return json.Marshal(&src.Environment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionEnvironment) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Environment != nil {
		return obj.Environment
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionEnvironment struct {
	value *SubscriptionEnvironment
	isSet bool
}

func (v NullableSubscriptionEnvironment) Get() *SubscriptionEnvironment {
	return v.value
}

func (v *NullableSubscriptionEnvironment) Set(val *SubscriptionEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEnvironment(val *SubscriptionEnvironment) *NullableSubscriptionEnvironment {
	return &NullableSubscriptionEnvironment{value: val, isSet: true}
}

func (v NullableSubscriptionEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


