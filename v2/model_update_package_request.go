/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdatePackageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePackageRequest{}

// UpdatePackageRequest struct for UpdatePackageRequest
type UpdatePackageRequest struct {
	// The display name of the package
	DisplayName *string `json:"display_name,omitempty"`
	// The position of the package within the offering
	Position *int32 `json:"position,omitempty"`
}

// NewUpdatePackageRequest instantiates a new UpdatePackageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePackageRequest() *UpdatePackageRequest {
	this := UpdatePackageRequest{}
	return &this
}

// NewUpdatePackageRequestWithDefaults instantiates a new UpdatePackageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePackageRequestWithDefaults() *UpdatePackageRequest {
	this := UpdatePackageRequest{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdatePackageRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePackageRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdatePackageRequest) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdatePackageRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *UpdatePackageRequest) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePackageRequest) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *UpdatePackageRequest) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *UpdatePackageRequest) SetPosition(v int32) {
	o.Position = &v
}

func (o UpdatePackageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePackageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	return toSerialize, nil
}

type NullableUpdatePackageRequest struct {
	value *UpdatePackageRequest
	isSet bool
}

func (v NullableUpdatePackageRequest) Get() *UpdatePackageRequest {
	return v.value
}

func (v *NullableUpdatePackageRequest) Set(val *UpdatePackageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePackageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePackageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePackageRequest(val *UpdatePackageRequest) *NullableUpdatePackageRequest {
	return &NullableUpdatePackageRequest{value: val, isSet: true}
}

func (v NullableUpdatePackageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePackageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


