/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the App type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &App{}

// App struct for App
type App struct {
	Amazon *AmazonAppAmazon `json:"amazon,omitempty"`
	AppStore *AppStoreAppAppStore `json:"app_store,omitempty"`
	MacAppStore *MacAppStoreAppMacAppStore `json:"mac_app_store,omitempty"`
	PlayStore *PlayStoreAppPlayStore `json:"play_store,omitempty"`
	Stripe *StripeAppStripe `json:"stripe,omitempty"`
	RcBilling *RCBillingAppRcBilling `json:"rc_billing,omitempty"`
	Roku *RokuAppRoku `json:"roku,omitempty"`
	Paddle *PaddleAppPaddle `json:"paddle,omitempty"`
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The id of the app
	Id string `json:"id"`
	// The name of the app
	Name string `json:"name"`
	// The date when the app was created in ms since epoch
	CreatedAt int64 `json:"created_at"`
	// The platform of the app
	Type string `json:"type"`
	// The id of the project
	ProjectId string `json:"project_id"`
}

type _App App

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp(object string, id string, name string, createdAt int64, type_ string, projectId string) *App {
	this := App{}
	this.Object = object
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	this.Type = type_
	this.ProjectId = projectId
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetAmazon returns the Amazon field value if set, zero value otherwise.
func (o *App) GetAmazon() AmazonAppAmazon {
	if o == nil || IsNil(o.Amazon) {
		var ret AmazonAppAmazon
		return ret
	}
	return *o.Amazon
}

// GetAmazonOk returns a tuple with the Amazon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetAmazonOk() (*AmazonAppAmazon, bool) {
	if o == nil || IsNil(o.Amazon) {
		return nil, false
	}
	return o.Amazon, true
}

// HasAmazon returns a boolean if a field has been set.
func (o *App) HasAmazon() bool {
	if o != nil && !IsNil(o.Amazon) {
		return true
	}

	return false
}

// SetAmazon gets a reference to the given AmazonAppAmazon and assigns it to the Amazon field.
func (o *App) SetAmazon(v AmazonAppAmazon) {
	o.Amazon = &v
}

// GetAppStore returns the AppStore field value if set, zero value otherwise.
func (o *App) GetAppStore() AppStoreAppAppStore {
	if o == nil || IsNil(o.AppStore) {
		var ret AppStoreAppAppStore
		return ret
	}
	return *o.AppStore
}

// GetAppStoreOk returns a tuple with the AppStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetAppStoreOk() (*AppStoreAppAppStore, bool) {
	if o == nil || IsNil(o.AppStore) {
		return nil, false
	}
	return o.AppStore, true
}

// HasAppStore returns a boolean if a field has been set.
func (o *App) HasAppStore() bool {
	if o != nil && !IsNil(o.AppStore) {
		return true
	}

	return false
}

// SetAppStore gets a reference to the given AppStoreAppAppStore and assigns it to the AppStore field.
func (o *App) SetAppStore(v AppStoreAppAppStore) {
	o.AppStore = &v
}

// GetMacAppStore returns the MacAppStore field value if set, zero value otherwise.
func (o *App) GetMacAppStore() MacAppStoreAppMacAppStore {
	if o == nil || IsNil(o.MacAppStore) {
		var ret MacAppStoreAppMacAppStore
		return ret
	}
	return *o.MacAppStore
}

// GetMacAppStoreOk returns a tuple with the MacAppStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetMacAppStoreOk() (*MacAppStoreAppMacAppStore, bool) {
	if o == nil || IsNil(o.MacAppStore) {
		return nil, false
	}
	return o.MacAppStore, true
}

// HasMacAppStore returns a boolean if a field has been set.
func (o *App) HasMacAppStore() bool {
	if o != nil && !IsNil(o.MacAppStore) {
		return true
	}

	return false
}

// SetMacAppStore gets a reference to the given MacAppStoreAppMacAppStore and assigns it to the MacAppStore field.
func (o *App) SetMacAppStore(v MacAppStoreAppMacAppStore) {
	o.MacAppStore = &v
}

// GetPlayStore returns the PlayStore field value if set, zero value otherwise.
func (o *App) GetPlayStore() PlayStoreAppPlayStore {
	if o == nil || IsNil(o.PlayStore) {
		var ret PlayStoreAppPlayStore
		return ret
	}
	return *o.PlayStore
}

// GetPlayStoreOk returns a tuple with the PlayStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPlayStoreOk() (*PlayStoreAppPlayStore, bool) {
	if o == nil || IsNil(o.PlayStore) {
		return nil, false
	}
	return o.PlayStore, true
}

// HasPlayStore returns a boolean if a field has been set.
func (o *App) HasPlayStore() bool {
	if o != nil && !IsNil(o.PlayStore) {
		return true
	}

	return false
}

// SetPlayStore gets a reference to the given PlayStoreAppPlayStore and assigns it to the PlayStore field.
func (o *App) SetPlayStore(v PlayStoreAppPlayStore) {
	o.PlayStore = &v
}

// GetStripe returns the Stripe field value if set, zero value otherwise.
func (o *App) GetStripe() StripeAppStripe {
	if o == nil || IsNil(o.Stripe) {
		var ret StripeAppStripe
		return ret
	}
	return *o.Stripe
}

// GetStripeOk returns a tuple with the Stripe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetStripeOk() (*StripeAppStripe, bool) {
	if o == nil || IsNil(o.Stripe) {
		return nil, false
	}
	return o.Stripe, true
}

// HasStripe returns a boolean if a field has been set.
func (o *App) HasStripe() bool {
	if o != nil && !IsNil(o.Stripe) {
		return true
	}

	return false
}

// SetStripe gets a reference to the given StripeAppStripe and assigns it to the Stripe field.
func (o *App) SetStripe(v StripeAppStripe) {
	o.Stripe = &v
}

// GetRcBilling returns the RcBilling field value if set, zero value otherwise.
func (o *App) GetRcBilling() RCBillingAppRcBilling {
	if o == nil || IsNil(o.RcBilling) {
		var ret RCBillingAppRcBilling
		return ret
	}
	return *o.RcBilling
}

// GetRcBillingOk returns a tuple with the RcBilling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetRcBillingOk() (*RCBillingAppRcBilling, bool) {
	if o == nil || IsNil(o.RcBilling) {
		return nil, false
	}
	return o.RcBilling, true
}

// HasRcBilling returns a boolean if a field has been set.
func (o *App) HasRcBilling() bool {
	if o != nil && !IsNil(o.RcBilling) {
		return true
	}

	return false
}

// SetRcBilling gets a reference to the given RCBillingAppRcBilling and assigns it to the RcBilling field.
func (o *App) SetRcBilling(v RCBillingAppRcBilling) {
	o.RcBilling = &v
}

// GetRoku returns the Roku field value if set, zero value otherwise.
func (o *App) GetRoku() RokuAppRoku {
	if o == nil || IsNil(o.Roku) {
		var ret RokuAppRoku
		return ret
	}
	return *o.Roku
}

// GetRokuOk returns a tuple with the Roku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetRokuOk() (*RokuAppRoku, bool) {
	if o == nil || IsNil(o.Roku) {
		return nil, false
	}
	return o.Roku, true
}

// HasRoku returns a boolean if a field has been set.
func (o *App) HasRoku() bool {
	if o != nil && !IsNil(o.Roku) {
		return true
	}

	return false
}

// SetRoku gets a reference to the given RokuAppRoku and assigns it to the Roku field.
func (o *App) SetRoku(v RokuAppRoku) {
	o.Roku = &v
}

// GetPaddle returns the Paddle field value if set, zero value otherwise.
func (o *App) GetPaddle() PaddleAppPaddle {
	if o == nil || IsNil(o.Paddle) {
		var ret PaddleAppPaddle
		return ret
	}
	return *o.Paddle
}

// GetPaddleOk returns a tuple with the Paddle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPaddleOk() (*PaddleAppPaddle, bool) {
	if o == nil || IsNil(o.Paddle) {
		return nil, false
	}
	return o.Paddle, true
}

// HasPaddle returns a boolean if a field has been set.
func (o *App) HasPaddle() bool {
	if o != nil && !IsNil(o.Paddle) {
		return true
	}

	return false
}

// SetPaddle gets a reference to the given PaddleAppPaddle and assigns it to the Paddle field.
func (o *App) SetPaddle(v PaddleAppPaddle) {
	o.Paddle = &v
}

// GetObject returns the Object field value
func (o *App) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *App) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *App) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *App) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *App) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *App) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *App) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *App) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *App) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *App) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *App) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *App) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetType returns the Type field value
func (o *App) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *App) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *App) SetType(v string) {
	o.Type = v
}

// GetProjectId returns the ProjectId field value
func (o *App) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *App) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *App) SetProjectId(v string) {
	o.ProjectId = v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o App) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amazon) {
		toSerialize["amazon"] = o.Amazon
	}
	if !IsNil(o.AppStore) {
		toSerialize["app_store"] = o.AppStore
	}
	if !IsNil(o.MacAppStore) {
		toSerialize["mac_app_store"] = o.MacAppStore
	}
	if !IsNil(o.PlayStore) {
		toSerialize["play_store"] = o.PlayStore
	}
	if !IsNil(o.Stripe) {
		toSerialize["stripe"] = o.Stripe
	}
	if !IsNil(o.RcBilling) {
		toSerialize["rc_billing"] = o.RcBilling
	}
	if !IsNil(o.Roku) {
		toSerialize["roku"] = o.Roku
	}
	if !IsNil(o.Paddle) {
		toSerialize["paddle"] = o.Paddle
	}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["type"] = o.Type
	toSerialize["project_id"] = o.ProjectId
	return toSerialize, nil
}

func (o *App) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"name",
		"created_at",
		"type",
		"project_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApp := _App{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApp)

	if err != nil {
		return err
	}

	*o = App(varApp)

	return err
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


