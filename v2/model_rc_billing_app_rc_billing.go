/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCBillingAppRcBilling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCBillingAppRcBilling{}

// RCBillingAppRcBilling Revenue Cat Billing Store type details
type RCBillingAppRcBilling struct {
	// Stripe account connected to your RevenueCat account.
	StripeAccountId NullableString `json:"stripe_account_id,omitempty"`
	// The company name.  This field is deprecated. Please, use `app_name` instead.
	// Deprecated
	SellerCompanyName string `json:"seller_company_name"`
	// Shown in checkout, emails, and receipts sent to customers.
	AppName *string `json:"app_name,omitempty"`
	// The company support email. This field is deprecated. Please, use `support_email` instead.
	// Deprecated
	SellerCompanySupportEmail NullableString `json:"seller_company_support_email,omitempty"`
	// Used as the `reply to` address in all emails sent to customers, to allow them to receive support. 
	SupportEmail NullableString `json:"support_email,omitempty"`
	DefaultCurrency RCBillingCurrency `json:"default_currency"`
}

type _RCBillingAppRcBilling RCBillingAppRcBilling

// NewRCBillingAppRcBilling instantiates a new RCBillingAppRcBilling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCBillingAppRcBilling(sellerCompanyName string, defaultCurrency RCBillingCurrency) *RCBillingAppRcBilling {
	this := RCBillingAppRcBilling{}
	this.SellerCompanyName = sellerCompanyName
	this.DefaultCurrency = defaultCurrency
	return &this
}

// NewRCBillingAppRcBillingWithDefaults instantiates a new RCBillingAppRcBilling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCBillingAppRcBillingWithDefaults() *RCBillingAppRcBilling {
	this := RCBillingAppRcBilling{}
	return &this
}

// GetStripeAccountId returns the StripeAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RCBillingAppRcBilling) GetStripeAccountId() string {
	if o == nil || IsNil(o.StripeAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.StripeAccountId.Get()
}

// GetStripeAccountIdOk returns a tuple with the StripeAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RCBillingAppRcBilling) GetStripeAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StripeAccountId.Get(), o.StripeAccountId.IsSet()
}

// HasStripeAccountId returns a boolean if a field has been set.
func (o *RCBillingAppRcBilling) HasStripeAccountId() bool {
	if o != nil && o.StripeAccountId.IsSet() {
		return true
	}

	return false
}

// SetStripeAccountId gets a reference to the given NullableString and assigns it to the StripeAccountId field.
func (o *RCBillingAppRcBilling) SetStripeAccountId(v string) {
	o.StripeAccountId.Set(&v)
}
// SetStripeAccountIdNil sets the value for StripeAccountId to be an explicit nil
func (o *RCBillingAppRcBilling) SetStripeAccountIdNil() {
	o.StripeAccountId.Set(nil)
}

// UnsetStripeAccountId ensures that no value is present for StripeAccountId, not even an explicit nil
func (o *RCBillingAppRcBilling) UnsetStripeAccountId() {
	o.StripeAccountId.Unset()
}

// GetSellerCompanyName returns the SellerCompanyName field value
// Deprecated
func (o *RCBillingAppRcBilling) GetSellerCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SellerCompanyName
}

// GetSellerCompanyNameOk returns a tuple with the SellerCompanyName field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RCBillingAppRcBilling) GetSellerCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellerCompanyName, true
}

// SetSellerCompanyName sets field value
// Deprecated
func (o *RCBillingAppRcBilling) SetSellerCompanyName(v string) {
	o.SellerCompanyName = v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *RCBillingAppRcBilling) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCBillingAppRcBilling) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *RCBillingAppRcBilling) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *RCBillingAppRcBilling) SetAppName(v string) {
	o.AppName = &v
}

// GetSellerCompanySupportEmail returns the SellerCompanySupportEmail field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *RCBillingAppRcBilling) GetSellerCompanySupportEmail() string {
	if o == nil || IsNil(o.SellerCompanySupportEmail.Get()) {
		var ret string
		return ret
	}
	return *o.SellerCompanySupportEmail.Get()
}

// GetSellerCompanySupportEmailOk returns a tuple with the SellerCompanySupportEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *RCBillingAppRcBilling) GetSellerCompanySupportEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellerCompanySupportEmail.Get(), o.SellerCompanySupportEmail.IsSet()
}

// HasSellerCompanySupportEmail returns a boolean if a field has been set.
func (o *RCBillingAppRcBilling) HasSellerCompanySupportEmail() bool {
	if o != nil && o.SellerCompanySupportEmail.IsSet() {
		return true
	}

	return false
}

// SetSellerCompanySupportEmail gets a reference to the given NullableString and assigns it to the SellerCompanySupportEmail field.
// Deprecated
func (o *RCBillingAppRcBilling) SetSellerCompanySupportEmail(v string) {
	o.SellerCompanySupportEmail.Set(&v)
}
// SetSellerCompanySupportEmailNil sets the value for SellerCompanySupportEmail to be an explicit nil
func (o *RCBillingAppRcBilling) SetSellerCompanySupportEmailNil() {
	o.SellerCompanySupportEmail.Set(nil)
}

// UnsetSellerCompanySupportEmail ensures that no value is present for SellerCompanySupportEmail, not even an explicit nil
func (o *RCBillingAppRcBilling) UnsetSellerCompanySupportEmail() {
	o.SellerCompanySupportEmail.Unset()
}

// GetSupportEmail returns the SupportEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RCBillingAppRcBilling) GetSupportEmail() string {
	if o == nil || IsNil(o.SupportEmail.Get()) {
		var ret string
		return ret
	}
	return *o.SupportEmail.Get()
}

// GetSupportEmailOk returns a tuple with the SupportEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RCBillingAppRcBilling) GetSupportEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportEmail.Get(), o.SupportEmail.IsSet()
}

// HasSupportEmail returns a boolean if a field has been set.
func (o *RCBillingAppRcBilling) HasSupportEmail() bool {
	if o != nil && o.SupportEmail.IsSet() {
		return true
	}

	return false
}

// SetSupportEmail gets a reference to the given NullableString and assigns it to the SupportEmail field.
func (o *RCBillingAppRcBilling) SetSupportEmail(v string) {
	o.SupportEmail.Set(&v)
}
// SetSupportEmailNil sets the value for SupportEmail to be an explicit nil
func (o *RCBillingAppRcBilling) SetSupportEmailNil() {
	o.SupportEmail.Set(nil)
}

// UnsetSupportEmail ensures that no value is present for SupportEmail, not even an explicit nil
func (o *RCBillingAppRcBilling) UnsetSupportEmail() {
	o.SupportEmail.Unset()
}

// GetDefaultCurrency returns the DefaultCurrency field value
func (o *RCBillingAppRcBilling) GetDefaultCurrency() RCBillingCurrency {
	if o == nil {
		var ret RCBillingCurrency
		return ret
	}

	return o.DefaultCurrency
}

// GetDefaultCurrencyOk returns a tuple with the DefaultCurrency field value
// and a boolean to check if the value has been set.
func (o *RCBillingAppRcBilling) GetDefaultCurrencyOk() (*RCBillingCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultCurrency, true
}

// SetDefaultCurrency sets field value
func (o *RCBillingAppRcBilling) SetDefaultCurrency(v RCBillingCurrency) {
	o.DefaultCurrency = v
}

func (o RCBillingAppRcBilling) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCBillingAppRcBilling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StripeAccountId.IsSet() {
		toSerialize["stripe_account_id"] = o.StripeAccountId.Get()
	}
	toSerialize["seller_company_name"] = o.SellerCompanyName
	if !IsNil(o.AppName) {
		toSerialize["app_name"] = o.AppName
	}
	if o.SellerCompanySupportEmail.IsSet() {
		toSerialize["seller_company_support_email"] = o.SellerCompanySupportEmail.Get()
	}
	if o.SupportEmail.IsSet() {
		toSerialize["support_email"] = o.SupportEmail.Get()
	}
	toSerialize["default_currency"] = o.DefaultCurrency
	return toSerialize, nil
}

func (o *RCBillingAppRcBilling) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seller_company_name",
		"default_currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCBillingAppRcBilling := _RCBillingAppRcBilling{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCBillingAppRcBilling)

	if err != nil {
		return err
	}

	*o = RCBillingAppRcBilling(varRCBillingAppRcBilling)

	return err
}

type NullableRCBillingAppRcBilling struct {
	value *RCBillingAppRcBilling
	isSet bool
}

func (v NullableRCBillingAppRcBilling) Get() *RCBillingAppRcBilling {
	return v.value
}

func (v *NullableRCBillingAppRcBilling) Set(val *RCBillingAppRcBilling) {
	v.value = val
	v.isSet = true
}

func (v NullableRCBillingAppRcBilling) IsSet() bool {
	return v.isSet
}

func (v *NullableRCBillingAppRcBilling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCBillingAppRcBilling(val *RCBillingAppRcBilling) *NullableRCBillingAppRcBilling {
	return &NullableRCBillingAppRcBilling{value: val, isSet: true}
}

func (v NullableRCBillingAppRcBilling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCBillingAppRcBilling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


