/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonetaryAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonetaryAmount{}

// MonetaryAmount struct for MonetaryAmount
type MonetaryAmount struct {
	Currency Currency `json:"currency"`
	// Total revenue generated (excluding taxes and commission)
	Gross float32 `json:"gross"`
	// Store commission or payment processor fees deducted from gross revenue (if any)
	Commission *float32 `json:"commission,omitempty"`
	// Estimated taxes deducted from gross revenue
	Tax float32 `json:"tax"`
	// Net revenue after store commission / fees and taxes
	Proceeds float32 `json:"proceeds"`
}

type _MonetaryAmount MonetaryAmount

// NewMonetaryAmount instantiates a new MonetaryAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonetaryAmount(currency Currency, gross float32, tax float32, proceeds float32) *MonetaryAmount {
	this := MonetaryAmount{}
	this.Currency = currency
	this.Gross = gross
	this.Tax = tax
	this.Proceeds = proceeds
	return &this
}

// NewMonetaryAmountWithDefaults instantiates a new MonetaryAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonetaryAmountWithDefaults() *MonetaryAmount {
	this := MonetaryAmount{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *MonetaryAmount) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *MonetaryAmount) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *MonetaryAmount) SetCurrency(v Currency) {
	o.Currency = v
}

// GetGross returns the Gross field value
func (o *MonetaryAmount) GetGross() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Gross
}

// GetGrossOk returns a tuple with the Gross field value
// and a boolean to check if the value has been set.
func (o *MonetaryAmount) GetGrossOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gross, true
}

// SetGross sets field value
func (o *MonetaryAmount) SetGross(v float32) {
	o.Gross = v
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *MonetaryAmount) GetCommission() float32 {
	if o == nil || IsNil(o.Commission) {
		var ret float32
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonetaryAmount) GetCommissionOk() (*float32, bool) {
	if o == nil || IsNil(o.Commission) {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *MonetaryAmount) HasCommission() bool {
	if o != nil && !IsNil(o.Commission) {
		return true
	}

	return false
}

// SetCommission gets a reference to the given float32 and assigns it to the Commission field.
func (o *MonetaryAmount) SetCommission(v float32) {
	o.Commission = &v
}

// GetTax returns the Tax field value
func (o *MonetaryAmount) GetTax() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Tax
}

// GetTaxOk returns a tuple with the Tax field value
// and a boolean to check if the value has been set.
func (o *MonetaryAmount) GetTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tax, true
}

// SetTax sets field value
func (o *MonetaryAmount) SetTax(v float32) {
	o.Tax = v
}

// GetProceeds returns the Proceeds field value
func (o *MonetaryAmount) GetProceeds() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Proceeds
}

// GetProceedsOk returns a tuple with the Proceeds field value
// and a boolean to check if the value has been set.
func (o *MonetaryAmount) GetProceedsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proceeds, true
}

// SetProceeds sets field value
func (o *MonetaryAmount) SetProceeds(v float32) {
	o.Proceeds = v
}

func (o MonetaryAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonetaryAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["gross"] = o.Gross
	if !IsNil(o.Commission) {
		toSerialize["commission"] = o.Commission
	}
	toSerialize["tax"] = o.Tax
	toSerialize["proceeds"] = o.Proceeds
	return toSerialize, nil
}

func (o *MonetaryAmount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"gross",
		"tax",
		"proceeds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonetaryAmount := _MonetaryAmount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonetaryAmount)

	if err != nil {
		return err
	}

	*o = MonetaryAmount(varMonetaryAmount)

	return err
}

type NullableMonetaryAmount struct {
	value *MonetaryAmount
	isSet bool
}

func (v NullableMonetaryAmount) Get() *MonetaryAmount {
	return v.value
}

func (v *NullableMonetaryAmount) Set(val *MonetaryAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableMonetaryAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableMonetaryAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonetaryAmount(val *MonetaryAmount) *NullableMonetaryAmount {
	return &NullableMonetaryAmount{value: val, isSet: true}
}

func (v NullableMonetaryAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonetaryAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


