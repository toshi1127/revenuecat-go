/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppStoreAppCreateAppStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppStoreAppCreateAppStore{}

// AppStoreAppCreateAppStore App Store type details. Should only be used when type is app_store.
type AppStoreAppCreateAppStore struct {
	// The bundle ID of the app
	BundleId string `json:"bundle_id"`
	// The shared secret of the app
	SharedSecret *string `json:"shared_secret,omitempty"`
	// PKCS /#8 In App Key downloaded from App Store Connect in PEM format. Copy the contents of the file in this field. See instructions on how to get it in:  https://www.revenuecat.com/docs/in-app-purchase-key-configuration 
	SubscriptionPrivateKey *string `json:"subscription_private_key,omitempty"`
	// In App Key id. The ID of the downloaded in app key. You can get it from App Store Connect
	SubscriptionKeyId *string `json:"subscription_key_id,omitempty"`
	// The key Issuer id. See instructions on how to obtain this in: https://www.revenuecat.com/docs/in-app-purchase-key-configuration#3-providing-the-issuer-id-to-revenuecat 
	SubscriptionKeyIssuer *string `json:"subscription_key_issuer,omitempty"`
}

type _AppStoreAppCreateAppStore AppStoreAppCreateAppStore

// NewAppStoreAppCreateAppStore instantiates a new AppStoreAppCreateAppStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStoreAppCreateAppStore(bundleId string) *AppStoreAppCreateAppStore {
	this := AppStoreAppCreateAppStore{}
	this.BundleId = bundleId
	return &this
}

// NewAppStoreAppCreateAppStoreWithDefaults instantiates a new AppStoreAppCreateAppStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStoreAppCreateAppStoreWithDefaults() *AppStoreAppCreateAppStore {
	this := AppStoreAppCreateAppStore{}
	return &this
}

// GetBundleId returns the BundleId field value
func (o *AppStoreAppCreateAppStore) GetBundleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value
// and a boolean to check if the value has been set.
func (o *AppStoreAppCreateAppStore) GetBundleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BundleId, true
}

// SetBundleId sets field value
func (o *AppStoreAppCreateAppStore) SetBundleId(v string) {
	o.BundleId = v
}

// GetSharedSecret returns the SharedSecret field value if set, zero value otherwise.
func (o *AppStoreAppCreateAppStore) GetSharedSecret() string {
	if o == nil || IsNil(o.SharedSecret) {
		var ret string
		return ret
	}
	return *o.SharedSecret
}

// GetSharedSecretOk returns a tuple with the SharedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreAppCreateAppStore) GetSharedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SharedSecret) {
		return nil, false
	}
	return o.SharedSecret, true
}

// HasSharedSecret returns a boolean if a field has been set.
func (o *AppStoreAppCreateAppStore) HasSharedSecret() bool {
	if o != nil && !IsNil(o.SharedSecret) {
		return true
	}

	return false
}

// SetSharedSecret gets a reference to the given string and assigns it to the SharedSecret field.
func (o *AppStoreAppCreateAppStore) SetSharedSecret(v string) {
	o.SharedSecret = &v
}

// GetSubscriptionPrivateKey returns the SubscriptionPrivateKey field value if set, zero value otherwise.
func (o *AppStoreAppCreateAppStore) GetSubscriptionPrivateKey() string {
	if o == nil || IsNil(o.SubscriptionPrivateKey) {
		var ret string
		return ret
	}
	return *o.SubscriptionPrivateKey
}

// GetSubscriptionPrivateKeyOk returns a tuple with the SubscriptionPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreAppCreateAppStore) GetSubscriptionPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionPrivateKey) {
		return nil, false
	}
	return o.SubscriptionPrivateKey, true
}

// HasSubscriptionPrivateKey returns a boolean if a field has been set.
func (o *AppStoreAppCreateAppStore) HasSubscriptionPrivateKey() bool {
	if o != nil && !IsNil(o.SubscriptionPrivateKey) {
		return true
	}

	return false
}

// SetSubscriptionPrivateKey gets a reference to the given string and assigns it to the SubscriptionPrivateKey field.
func (o *AppStoreAppCreateAppStore) SetSubscriptionPrivateKey(v string) {
	o.SubscriptionPrivateKey = &v
}

// GetSubscriptionKeyId returns the SubscriptionKeyId field value if set, zero value otherwise.
func (o *AppStoreAppCreateAppStore) GetSubscriptionKeyId() string {
	if o == nil || IsNil(o.SubscriptionKeyId) {
		var ret string
		return ret
	}
	return *o.SubscriptionKeyId
}

// GetSubscriptionKeyIdOk returns a tuple with the SubscriptionKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreAppCreateAppStore) GetSubscriptionKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionKeyId) {
		return nil, false
	}
	return o.SubscriptionKeyId, true
}

// HasSubscriptionKeyId returns a boolean if a field has been set.
func (o *AppStoreAppCreateAppStore) HasSubscriptionKeyId() bool {
	if o != nil && !IsNil(o.SubscriptionKeyId) {
		return true
	}

	return false
}

// SetSubscriptionKeyId gets a reference to the given string and assigns it to the SubscriptionKeyId field.
func (o *AppStoreAppCreateAppStore) SetSubscriptionKeyId(v string) {
	o.SubscriptionKeyId = &v
}

// GetSubscriptionKeyIssuer returns the SubscriptionKeyIssuer field value if set, zero value otherwise.
func (o *AppStoreAppCreateAppStore) GetSubscriptionKeyIssuer() string {
	if o == nil || IsNil(o.SubscriptionKeyIssuer) {
		var ret string
		return ret
	}
	return *o.SubscriptionKeyIssuer
}

// GetSubscriptionKeyIssuerOk returns a tuple with the SubscriptionKeyIssuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreAppCreateAppStore) GetSubscriptionKeyIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionKeyIssuer) {
		return nil, false
	}
	return o.SubscriptionKeyIssuer, true
}

// HasSubscriptionKeyIssuer returns a boolean if a field has been set.
func (o *AppStoreAppCreateAppStore) HasSubscriptionKeyIssuer() bool {
	if o != nil && !IsNil(o.SubscriptionKeyIssuer) {
		return true
	}

	return false
}

// SetSubscriptionKeyIssuer gets a reference to the given string and assigns it to the SubscriptionKeyIssuer field.
func (o *AppStoreAppCreateAppStore) SetSubscriptionKeyIssuer(v string) {
	o.SubscriptionKeyIssuer = &v
}

func (o AppStoreAppCreateAppStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppStoreAppCreateAppStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bundle_id"] = o.BundleId
	if !IsNil(o.SharedSecret) {
		toSerialize["shared_secret"] = o.SharedSecret
	}
	if !IsNil(o.SubscriptionPrivateKey) {
		toSerialize["subscription_private_key"] = o.SubscriptionPrivateKey
	}
	if !IsNil(o.SubscriptionKeyId) {
		toSerialize["subscription_key_id"] = o.SubscriptionKeyId
	}
	if !IsNil(o.SubscriptionKeyIssuer) {
		toSerialize["subscription_key_issuer"] = o.SubscriptionKeyIssuer
	}
	return toSerialize, nil
}

func (o *AppStoreAppCreateAppStore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bundle_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppStoreAppCreateAppStore := _AppStoreAppCreateAppStore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppStoreAppCreateAppStore)

	if err != nil {
		return err
	}

	*o = AppStoreAppCreateAppStore(varAppStoreAppCreateAppStore)

	return err
}

type NullableAppStoreAppCreateAppStore struct {
	value *AppStoreAppCreateAppStore
	isSet bool
}

func (v NullableAppStoreAppCreateAppStore) Get() *AppStoreAppCreateAppStore {
	return v.value
}

func (v *NullableAppStoreAppCreateAppStore) Set(val *AppStoreAppCreateAppStore) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStoreAppCreateAppStore) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStoreAppCreateAppStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStoreAppCreateAppStore(val *AppStoreAppCreateAppStore) *NullableAppStoreAppCreateAppStore {
	return &NullableAppStoreAppCreateAppStore{value: val, isSet: true}
}

func (v NullableAppStoreAppCreateAppStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStoreAppCreateAppStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


