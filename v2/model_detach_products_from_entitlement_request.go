/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetachProductsFromEntitlementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetachProductsFromEntitlementRequest{}

// DetachProductsFromEntitlementRequest struct for DetachProductsFromEntitlementRequest
type DetachProductsFromEntitlementRequest struct {
	// IDs of the products to be detached from the entitlement.
	ProductIds []string `json:"product_ids"`
}

type _DetachProductsFromEntitlementRequest DetachProductsFromEntitlementRequest

// NewDetachProductsFromEntitlementRequest instantiates a new DetachProductsFromEntitlementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetachProductsFromEntitlementRequest(productIds []string) *DetachProductsFromEntitlementRequest {
	this := DetachProductsFromEntitlementRequest{}
	this.ProductIds = productIds
	return &this
}

// NewDetachProductsFromEntitlementRequestWithDefaults instantiates a new DetachProductsFromEntitlementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetachProductsFromEntitlementRequestWithDefaults() *DetachProductsFromEntitlementRequest {
	this := DetachProductsFromEntitlementRequest{}
	return &this
}

// GetProductIds returns the ProductIds field value
func (o *DetachProductsFromEntitlementRequest) GetProductIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProductIds
}

// GetProductIdsOk returns a tuple with the ProductIds field value
// and a boolean to check if the value has been set.
func (o *DetachProductsFromEntitlementRequest) GetProductIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductIds, true
}

// SetProductIds sets field value
func (o *DetachProductsFromEntitlementRequest) SetProductIds(v []string) {
	o.ProductIds = v
}

func (o DetachProductsFromEntitlementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetachProductsFromEntitlementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product_ids"] = o.ProductIds
	return toSerialize, nil
}

func (o *DetachProductsFromEntitlementRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetachProductsFromEntitlementRequest := _DetachProductsFromEntitlementRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetachProductsFromEntitlementRequest)

	if err != nil {
		return err
	}

	*o = DetachProductsFromEntitlementRequest(varDetachProductsFromEntitlementRequest)

	return err
}

type NullableDetachProductsFromEntitlementRequest struct {
	value *DetachProductsFromEntitlementRequest
	isSet bool
}

func (v NullableDetachProductsFromEntitlementRequest) Get() *DetachProductsFromEntitlementRequest {
	return v.value
}

func (v *NullableDetachProductsFromEntitlementRequest) Set(val *DetachProductsFromEntitlementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDetachProductsFromEntitlementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDetachProductsFromEntitlementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetachProductsFromEntitlementRequest(val *DetachProductsFromEntitlementRequest) *NullableDetachProductsFromEntitlementRequest {
	return &NullableDetachProductsFromEntitlementRequest{value: val, isSet: true}
}

func (v NullableDetachProductsFromEntitlementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetachProductsFromEntitlementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


