/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VirtualCurrencyBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualCurrencyBalance{}

// VirtualCurrencyBalance struct for VirtualCurrencyBalance
type VirtualCurrencyBalance struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The code of the virtual currency.
	CurrencyCode string `json:"currency_code"`
	// The balance of the virtual currency.
	Balance int32 `json:"balance"`
}

type _VirtualCurrencyBalance VirtualCurrencyBalance

// NewVirtualCurrencyBalance instantiates a new VirtualCurrencyBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCurrencyBalance(object string, currencyCode string, balance int32) *VirtualCurrencyBalance {
	this := VirtualCurrencyBalance{}
	this.Object = object
	this.CurrencyCode = currencyCode
	this.Balance = balance
	return &this
}

// NewVirtualCurrencyBalanceWithDefaults instantiates a new VirtualCurrencyBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCurrencyBalanceWithDefaults() *VirtualCurrencyBalance {
	this := VirtualCurrencyBalance{}
	return &this
}

// GetObject returns the Object field value
func (o *VirtualCurrencyBalance) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *VirtualCurrencyBalance) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *VirtualCurrencyBalance) SetObject(v string) {
	o.Object = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *VirtualCurrencyBalance) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *VirtualCurrencyBalance) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *VirtualCurrencyBalance) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetBalance returns the Balance field value
func (o *VirtualCurrencyBalance) GetBalance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *VirtualCurrencyBalance) GetBalanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *VirtualCurrencyBalance) SetBalance(v int32) {
	o.Balance = v
}

func (o VirtualCurrencyBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualCurrencyBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["currency_code"] = o.CurrencyCode
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *VirtualCurrencyBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"currency_code",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVirtualCurrencyBalance := _VirtualCurrencyBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVirtualCurrencyBalance)

	if err != nil {
		return err
	}

	*o = VirtualCurrencyBalance(varVirtualCurrencyBalance)

	return err
}

type NullableVirtualCurrencyBalance struct {
	value *VirtualCurrencyBalance
	isSet bool
}

func (v NullableVirtualCurrencyBalance) Get() *VirtualCurrencyBalance {
	return v.value
}

func (v *NullableVirtualCurrencyBalance) Set(val *VirtualCurrencyBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCurrencyBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCurrencyBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCurrencyBalance(val *VirtualCurrencyBalance) *NullableVirtualCurrencyBalance {
	return &NullableVirtualCurrencyBalance{value: val, isSet: true}
}

func (v NullableVirtualCurrencyBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCurrencyBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


