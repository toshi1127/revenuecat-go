/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomerAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerAttribute{}

// CustomerAttribute struct for CustomerAttribute
type CustomerAttribute struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The name of the attribute. Reserved attributes are prefixed with a `$`.
	Name string `json:"name"`
	// The value of the attribute.
	Value NullableString `json:"value"`
	// The time when the attribute was last updated.
	UpdatedAt int64 `json:"updated_at"`
}

type _CustomerAttribute CustomerAttribute

// NewCustomerAttribute instantiates a new CustomerAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerAttribute(object string, name string, value NullableString, updatedAt int64) *CustomerAttribute {
	this := CustomerAttribute{}
	this.Object = object
	this.Name = name
	this.Value = value
	this.UpdatedAt = updatedAt
	return &this
}

// NewCustomerAttributeWithDefaults instantiates a new CustomerAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerAttributeWithDefaults() *CustomerAttribute {
	this := CustomerAttribute{}
	return &this
}

// GetObject returns the Object field value
func (o *CustomerAttribute) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *CustomerAttribute) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *CustomerAttribute) SetObject(v string) {
	o.Object = v
}

// GetName returns the Name field value
func (o *CustomerAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomerAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomerAttribute) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CustomerAttribute) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerAttribute) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *CustomerAttribute) SetValue(v string) {
	o.Value.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CustomerAttribute) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CustomerAttribute) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CustomerAttribute) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

func (o CustomerAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value.Get()
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *CustomerAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"name",
		"value",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerAttribute := _CustomerAttribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerAttribute)

	if err != nil {
		return err
	}

	*o = CustomerAttribute(varCustomerAttribute)

	return err
}

type NullableCustomerAttribute struct {
	value *CustomerAttribute
	isSet bool
}

func (v NullableCustomerAttribute) Get() *CustomerAttribute {
	return v.value
}

func (v *NullableCustomerAttribute) Set(val *CustomerAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerAttribute(val *CustomerAttribute) *NullableCustomerAttribute {
	return &NullableCustomerAttribute{value: val, isSet: true}
}

func (v NullableCustomerAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


