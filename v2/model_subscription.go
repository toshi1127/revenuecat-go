/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Subscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscription{}

// Subscription struct for Subscription
type Subscription struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The ID of the subscription (generated by RevenueCat)
	Id string `json:"id"`
	// The ID of the customer
	CustomerId string `json:"customer_id"`
	// The ID of the original customer. Relevant for subscriptions that were transferred from one customer to another
	OriginalCustomerId string `json:"original_customer_id"`
	// The RevenueCat ID of the product that the customer is subscribed to. Exists for all store types except for promotional.
	ProductId NullableString `json:"product_id"`
	// The date when the subscription originally started in ms since epoch
	StartsAt int64 `json:"starts_at"`
	// The date when the subscription billing period started in ms since epoch
	CurrentPeriodStartsAt int64 `json:"current_period_starts_at"`
	// The date when the subscription billing period is expected to end in ms since epoch. Can be null if the subscription is paused until an indefinite date.
	CurrentPeriodEndsAt NullableInt64 `json:"current_period_ends_at"`
	// Determines whether the customer should currently be provided access to the entitlements associated with the subscription
	GivesAccess bool `json:"gives_access"`
	// Determines whether there is a pending payment associated with the subscription
	PendingPayment bool `json:"pending_payment"`
	// The auto renewal status of a subscription.<br><br>Possible values:<br>• `will_renew`: the subscription is currently set to automatically renew<br>• `will_not_renew`: the subscription is currently set to expire at the end of the period<br>• `will_change_product`: the subscription is currently set to change product at the end of the period (which might start a new subscription)<br>• `will_pause`: the subscription is currently set to pause at the end of the current period<br>• `requires_price_increase_consent`: the subscription will expire at the end of the current period unless the customer consents to the price increase<br>• `has_already_renewed`: the customer has already been charged for the upcoming renewal (so the renewal will take place even if the customer opts out of auto-renewal before the end of the period) 
	AutoRenewalStatus string `json:"auto_renewal_status"`
	// The status of a subscription. Please note that additional states might be added in the future. To determine whether or not a subscription currently provides access to any associated entitlements, use the _gives_access_ field.<br><br>Possible values:<br>• `trialing`: the subscription is in a free trial period<br>• `active`: the subscription is active, in a paid period<br>• `expired`: the subscription is expired and no longer active<br>• `in_grace_period`: the subscription is past its regular expiry date and experienced a billing issue, but is currently still in an access-granting grace period<br>• `in_billing_retry`: the subscription has experienced a billing issue. Billing is being retried, access is suspended.-paused: the subscription is currently paused and should not provide access.<br>• `unknown`: the subscription is in an unknown state. Refer to the _gives_access_ field to determine whether or not to grant access.<br>• `incomplete`: the subscription is in an incomplete state, maybe due to incorrect billing details or because it's scheduled to start in the future. 
	Status string `json:"status"`
	TotalRevenueInUsd MonetaryAmount `json:"total_revenue_in_usd"`
	// The ID of the offering the customer saw when purchasing the subscription
	PresentedOfferingId NullableString `json:"presented_offering_id"`
	Entitlements EntitlementList1 `json:"entitlements"`
	Environment Environment `json:"environment"`
	// Store the subscription belongs to
	Store string `json:"store"`
	// The subscription identifier as per the store (e.g, for Apple App Store, the `transaction_id` of the latest transaction of the subscription, or for Google Play Store, the Order ID of the last renewal of the subscription)
	StoreSubscriptionIdentifier string `json:"store_subscription_identifier"`
	Ownership Ownership `json:"ownership"`
	PendingChanges NullableSubscriptionPendingChanges `json:"pending_changes,omitempty"`
	Country NullableCountry `json:"country,omitempty"`
	// The URL to manage the subscription
	ManagementUrl NullableString `json:"management_url"`
}

type _Subscription Subscription

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(object string, id string, customerId string, originalCustomerId string, productId NullableString, startsAt int64, currentPeriodStartsAt int64, currentPeriodEndsAt NullableInt64, givesAccess bool, pendingPayment bool, autoRenewalStatus string, status string, totalRevenueInUsd MonetaryAmount, presentedOfferingId NullableString, entitlements EntitlementList1, environment Environment, store string, storeSubscriptionIdentifier string, ownership Ownership, managementUrl NullableString) *Subscription {
	this := Subscription{}
	this.Object = object
	this.Id = id
	this.CustomerId = customerId
	this.OriginalCustomerId = originalCustomerId
	this.ProductId = productId
	this.StartsAt = startsAt
	this.CurrentPeriodStartsAt = currentPeriodStartsAt
	this.CurrentPeriodEndsAt = currentPeriodEndsAt
	this.GivesAccess = givesAccess
	this.PendingPayment = pendingPayment
	this.AutoRenewalStatus = autoRenewalStatus
	this.Status = status
	this.TotalRevenueInUsd = totalRevenueInUsd
	this.PresentedOfferingId = presentedOfferingId
	this.Entitlements = entitlements
	this.Environment = environment
	this.Store = store
	this.StoreSubscriptionIdentifier = storeSubscriptionIdentifier
	this.Ownership = ownership
	this.ManagementUrl = managementUrl
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetObject returns the Object field value
func (o *Subscription) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Subscription) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Subscription) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Subscription) SetId(v string) {
	o.Id = v
}

// GetCustomerId returns the CustomerId field value
func (o *Subscription) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *Subscription) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetOriginalCustomerId returns the OriginalCustomerId field value
func (o *Subscription) GetOriginalCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalCustomerId
}

// GetOriginalCustomerIdOk returns a tuple with the OriginalCustomerId field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetOriginalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalCustomerId, true
}

// SetOriginalCustomerId sets field value
func (o *Subscription) SetOriginalCustomerId(v string) {
	o.OriginalCustomerId = v
}

// GetProductId returns the ProductId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Subscription) GetProductId() string {
	if o == nil || o.ProductId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProductId.Get()
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductId.Get(), o.ProductId.IsSet()
}

// SetProductId sets field value
func (o *Subscription) SetProductId(v string) {
	o.ProductId.Set(&v)
}

// GetStartsAt returns the StartsAt field value
func (o *Subscription) GetStartsAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetStartsAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartsAt, true
}

// SetStartsAt sets field value
func (o *Subscription) SetStartsAt(v int64) {
	o.StartsAt = v
}

// GetCurrentPeriodStartsAt returns the CurrentPeriodStartsAt field value
func (o *Subscription) GetCurrentPeriodStartsAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrentPeriodStartsAt
}

// GetCurrentPeriodStartsAtOk returns a tuple with the CurrentPeriodStartsAt field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrentPeriodStartsAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentPeriodStartsAt, true
}

// SetCurrentPeriodStartsAt sets field value
func (o *Subscription) SetCurrentPeriodStartsAt(v int64) {
	o.CurrentPeriodStartsAt = v
}

// GetCurrentPeriodEndsAt returns the CurrentPeriodEndsAt field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *Subscription) GetCurrentPeriodEndsAt() int64 {
	if o == nil || o.CurrentPeriodEndsAt.Get() == nil {
		var ret int64
		return ret
	}

	return *o.CurrentPeriodEndsAt.Get()
}

// GetCurrentPeriodEndsAtOk returns a tuple with the CurrentPeriodEndsAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetCurrentPeriodEndsAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentPeriodEndsAt.Get(), o.CurrentPeriodEndsAt.IsSet()
}

// SetCurrentPeriodEndsAt sets field value
func (o *Subscription) SetCurrentPeriodEndsAt(v int64) {
	o.CurrentPeriodEndsAt.Set(&v)
}

// GetGivesAccess returns the GivesAccess field value
func (o *Subscription) GetGivesAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GivesAccess
}

// GetGivesAccessOk returns a tuple with the GivesAccess field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetGivesAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GivesAccess, true
}

// SetGivesAccess sets field value
func (o *Subscription) SetGivesAccess(v bool) {
	o.GivesAccess = v
}

// GetPendingPayment returns the PendingPayment field value
func (o *Subscription) GetPendingPayment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PendingPayment
}

// GetPendingPaymentOk returns a tuple with the PendingPayment field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetPendingPaymentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingPayment, true
}

// SetPendingPayment sets field value
func (o *Subscription) SetPendingPayment(v bool) {
	o.PendingPayment = v
}

// GetAutoRenewalStatus returns the AutoRenewalStatus field value
func (o *Subscription) GetAutoRenewalStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AutoRenewalStatus
}

// GetAutoRenewalStatusOk returns a tuple with the AutoRenewalStatus field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetAutoRenewalStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRenewalStatus, true
}

// SetAutoRenewalStatus sets field value
func (o *Subscription) SetAutoRenewalStatus(v string) {
	o.AutoRenewalStatus = v
}

// GetStatus returns the Status field value
func (o *Subscription) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Subscription) SetStatus(v string) {
	o.Status = v
}

// GetTotalRevenueInUsd returns the TotalRevenueInUsd field value
func (o *Subscription) GetTotalRevenueInUsd() MonetaryAmount {
	if o == nil {
		var ret MonetaryAmount
		return ret
	}

	return o.TotalRevenueInUsd
}

// GetTotalRevenueInUsdOk returns a tuple with the TotalRevenueInUsd field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetTotalRevenueInUsdOk() (*MonetaryAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRevenueInUsd, true
}

// SetTotalRevenueInUsd sets field value
func (o *Subscription) SetTotalRevenueInUsd(v MonetaryAmount) {
	o.TotalRevenueInUsd = v
}

// GetPresentedOfferingId returns the PresentedOfferingId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Subscription) GetPresentedOfferingId() string {
	if o == nil || o.PresentedOfferingId.Get() == nil {
		var ret string
		return ret
	}

	return *o.PresentedOfferingId.Get()
}

// GetPresentedOfferingIdOk returns a tuple with the PresentedOfferingId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetPresentedOfferingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PresentedOfferingId.Get(), o.PresentedOfferingId.IsSet()
}

// SetPresentedOfferingId sets field value
func (o *Subscription) SetPresentedOfferingId(v string) {
	o.PresentedOfferingId.Set(&v)
}

// GetEntitlements returns the Entitlements field value
func (o *Subscription) GetEntitlements() EntitlementList1 {
	if o == nil {
		var ret EntitlementList1
		return ret
	}

	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetEntitlementsOk() (*EntitlementList1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entitlements, true
}

// SetEntitlements sets field value
func (o *Subscription) SetEntitlements(v EntitlementList1) {
	o.Entitlements = v
}

// GetEnvironment returns the Environment field value
func (o *Subscription) GetEnvironment() Environment {
	if o == nil {
		var ret Environment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetEnvironmentOk() (*Environment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *Subscription) SetEnvironment(v Environment) {
	o.Environment = v
}

// GetStore returns the Store field value
func (o *Subscription) GetStore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Store
}

// GetStoreOk returns a tuple with the Store field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetStoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Store, true
}

// SetStore sets field value
func (o *Subscription) SetStore(v string) {
	o.Store = v
}

// GetStoreSubscriptionIdentifier returns the StoreSubscriptionIdentifier field value
func (o *Subscription) GetStoreSubscriptionIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreSubscriptionIdentifier
}

// GetStoreSubscriptionIdentifierOk returns a tuple with the StoreSubscriptionIdentifier field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetStoreSubscriptionIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreSubscriptionIdentifier, true
}

// SetStoreSubscriptionIdentifier sets field value
func (o *Subscription) SetStoreSubscriptionIdentifier(v string) {
	o.StoreSubscriptionIdentifier = v
}

// GetOwnership returns the Ownership field value
func (o *Subscription) GetOwnership() Ownership {
	if o == nil {
		var ret Ownership
		return ret
	}

	return o.Ownership
}

// GetOwnershipOk returns a tuple with the Ownership field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetOwnershipOk() (*Ownership, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ownership, true
}

// SetOwnership sets field value
func (o *Subscription) SetOwnership(v Ownership) {
	o.Ownership = v
}

// GetPendingChanges returns the PendingChanges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetPendingChanges() SubscriptionPendingChanges {
	if o == nil || IsNil(o.PendingChanges.Get()) {
		var ret SubscriptionPendingChanges
		return ret
	}
	return *o.PendingChanges.Get()
}

// GetPendingChangesOk returns a tuple with the PendingChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetPendingChangesOk() (*SubscriptionPendingChanges, bool) {
	if o == nil {
		return nil, false
	}
	return o.PendingChanges.Get(), o.PendingChanges.IsSet()
}

// HasPendingChanges returns a boolean if a field has been set.
func (o *Subscription) HasPendingChanges() bool {
	if o != nil && o.PendingChanges.IsSet() {
		return true
	}

	return false
}

// SetPendingChanges gets a reference to the given NullableSubscriptionPendingChanges and assigns it to the PendingChanges field.
func (o *Subscription) SetPendingChanges(v SubscriptionPendingChanges) {
	o.PendingChanges.Set(&v)
}
// SetPendingChangesNil sets the value for PendingChanges to be an explicit nil
func (o *Subscription) SetPendingChangesNil() {
	o.PendingChanges.Set(nil)
}

// UnsetPendingChanges ensures that no value is present for PendingChanges, not even an explicit nil
func (o *Subscription) UnsetPendingChanges() {
	o.PendingChanges.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetCountry() Country {
	if o == nil || IsNil(o.Country.Get()) {
		var ret Country
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Subscription) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableCountry and assigns it to the Country field.
func (o *Subscription) SetCountry(v Country) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *Subscription) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Subscription) UnsetCountry() {
	o.Country.Unset()
}

// GetManagementUrl returns the ManagementUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Subscription) GetManagementUrl() string {
	if o == nil || o.ManagementUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.ManagementUrl.Get()
}

// GetManagementUrlOk returns a tuple with the ManagementUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetManagementUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementUrl.Get(), o.ManagementUrl.IsSet()
}

// SetManagementUrl sets field value
func (o *Subscription) SetManagementUrl(v string) {
	o.ManagementUrl.Set(&v)
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["original_customer_id"] = o.OriginalCustomerId
	toSerialize["product_id"] = o.ProductId.Get()
	toSerialize["starts_at"] = o.StartsAt
	toSerialize["current_period_starts_at"] = o.CurrentPeriodStartsAt
	toSerialize["current_period_ends_at"] = o.CurrentPeriodEndsAt.Get()
	toSerialize["gives_access"] = o.GivesAccess
	toSerialize["pending_payment"] = o.PendingPayment
	toSerialize["auto_renewal_status"] = o.AutoRenewalStatus
	toSerialize["status"] = o.Status
	toSerialize["total_revenue_in_usd"] = o.TotalRevenueInUsd
	toSerialize["presented_offering_id"] = o.PresentedOfferingId.Get()
	toSerialize["entitlements"] = o.Entitlements
	toSerialize["environment"] = o.Environment
	toSerialize["store"] = o.Store
	toSerialize["store_subscription_identifier"] = o.StoreSubscriptionIdentifier
	toSerialize["ownership"] = o.Ownership
	if o.PendingChanges.IsSet() {
		toSerialize["pending_changes"] = o.PendingChanges.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	toSerialize["management_url"] = o.ManagementUrl.Get()
	return toSerialize, nil
}

func (o *Subscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"customer_id",
		"original_customer_id",
		"product_id",
		"starts_at",
		"current_period_starts_at",
		"current_period_ends_at",
		"gives_access",
		"pending_payment",
		"auto_renewal_status",
		"status",
		"total_revenue_in_usd",
		"presented_offering_id",
		"entitlements",
		"environment",
		"store",
		"store_subscription_identifier",
		"ownership",
		"management_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscription := _Subscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscription)

	if err != nil {
		return err
	}

	*o = Subscription(varSubscription)

	return err
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


