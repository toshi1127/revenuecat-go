/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EligibilityCriteria the model 'EligibilityCriteria'
type EligibilityCriteria string

// List of EligibilityCriteria
const (
	ALL EligibilityCriteria = "all"
	GOOGLE_SDK_LT_6 EligibilityCriteria = "google_sdk_lt_6"
	GOOGLE_SDK_GE_6 EligibilityCriteria = "google_sdk_ge_6"
)

// All allowed values of EligibilityCriteria enum
var AllowedEligibilityCriteriaEnumValues = []EligibilityCriteria{
	"all",
	"google_sdk_lt_6",
	"google_sdk_ge_6",
}

func (v *EligibilityCriteria) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EligibilityCriteria(value)
	for _, existing := range AllowedEligibilityCriteriaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EligibilityCriteria", value)
}

// NewEligibilityCriteriaFromValue returns a pointer to a valid EligibilityCriteria
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEligibilityCriteriaFromValue(v string) (*EligibilityCriteria, error) {
	ev := EligibilityCriteria(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EligibilityCriteria: valid values are %v", v, AllowedEligibilityCriteriaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EligibilityCriteria) IsValid() bool {
	for _, existing := range AllowedEligibilityCriteriaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EligibilityCriteria value
func (v EligibilityCriteria) Ptr() *EligibilityCriteria {
	return &v
}

type NullableEligibilityCriteria struct {
	value *EligibilityCriteria
	isSet bool
}

func (v NullableEligibilityCriteria) Get() *EligibilityCriteria {
	return v.value
}

func (v *NullableEligibilityCriteria) Set(val *EligibilityCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableEligibilityCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableEligibilityCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEligibilityCriteria(val *EligibilityCriteria) *NullableEligibilityCriteria {
	return &NullableEligibilityCriteria{value: val, isSet: true}
}

func (v NullableEligibilityCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEligibilityCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

