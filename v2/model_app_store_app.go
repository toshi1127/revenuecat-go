/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AppStoreApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppStoreApp{}

// AppStoreApp struct for AppStoreApp
type AppStoreApp struct {
	AppStore *AppStoreAppAppStore `json:"app_store,omitempty"`
}

// NewAppStoreApp instantiates a new AppStoreApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStoreApp() *AppStoreApp {
	this := AppStoreApp{}
	return &this
}

// NewAppStoreAppWithDefaults instantiates a new AppStoreApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStoreAppWithDefaults() *AppStoreApp {
	this := AppStoreApp{}
	return &this
}

// GetAppStore returns the AppStore field value if set, zero value otherwise.
func (o *AppStoreApp) GetAppStore() AppStoreAppAppStore {
	if o == nil || IsNil(o.AppStore) {
		var ret AppStoreAppAppStore
		return ret
	}
	return *o.AppStore
}

// GetAppStoreOk returns a tuple with the AppStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreApp) GetAppStoreOk() (*AppStoreAppAppStore, bool) {
	if o == nil || IsNil(o.AppStore) {
		return nil, false
	}
	return o.AppStore, true
}

// HasAppStore returns a boolean if a field has been set.
func (o *AppStoreApp) HasAppStore() bool {
	if o != nil && !IsNil(o.AppStore) {
		return true
	}

	return false
}

// SetAppStore gets a reference to the given AppStoreAppAppStore and assigns it to the AppStore field.
func (o *AppStoreApp) SetAppStore(v AppStoreAppAppStore) {
	o.AppStore = &v
}

func (o AppStoreApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppStoreApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppStore) {
		toSerialize["app_store"] = o.AppStore
	}
	return toSerialize, nil
}

type NullableAppStoreApp struct {
	value *AppStoreApp
	isSet bool
}

func (v NullableAppStoreApp) Get() *AppStoreApp {
	return v.value
}

func (v *NullableAppStoreApp) Set(val *AppStoreApp) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStoreApp) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStoreApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStoreApp(val *AppStoreApp) *NullableAppStoreApp {
	return &NullableAppStoreApp{value: val, isSet: true}
}

func (v NullableAppStoreApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStoreApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


