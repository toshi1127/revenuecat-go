/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateAppRequestAppStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAppRequestAppStore{}

// UpdateAppRequestAppStore App Store type details. Should only be used when type is app_store.
type UpdateAppRequestAppStore struct {
	// The bundle ID of the app
	BundleId *string `json:"bundle_id,omitempty"`
	// The shared secret of the app
	SharedSecret NullableString `json:"shared_secret,omitempty"`
}

// NewUpdateAppRequestAppStore instantiates a new UpdateAppRequestAppStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAppRequestAppStore() *UpdateAppRequestAppStore {
	this := UpdateAppRequestAppStore{}
	return &this
}

// NewUpdateAppRequestAppStoreWithDefaults instantiates a new UpdateAppRequestAppStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAppRequestAppStoreWithDefaults() *UpdateAppRequestAppStore {
	this := UpdateAppRequestAppStore{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *UpdateAppRequestAppStore) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppRequestAppStore) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *UpdateAppRequestAppStore) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *UpdateAppRequestAppStore) SetBundleId(v string) {
	o.BundleId = &v
}

// GetSharedSecret returns the SharedSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAppRequestAppStore) GetSharedSecret() string {
	if o == nil || IsNil(o.SharedSecret.Get()) {
		var ret string
		return ret
	}
	return *o.SharedSecret.Get()
}

// GetSharedSecretOk returns a tuple with the SharedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAppRequestAppStore) GetSharedSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedSecret.Get(), o.SharedSecret.IsSet()
}

// HasSharedSecret returns a boolean if a field has been set.
func (o *UpdateAppRequestAppStore) HasSharedSecret() bool {
	if o != nil && o.SharedSecret.IsSet() {
		return true
	}

	return false
}

// SetSharedSecret gets a reference to the given NullableString and assigns it to the SharedSecret field.
func (o *UpdateAppRequestAppStore) SetSharedSecret(v string) {
	o.SharedSecret.Set(&v)
}
// SetSharedSecretNil sets the value for SharedSecret to be an explicit nil
func (o *UpdateAppRequestAppStore) SetSharedSecretNil() {
	o.SharedSecret.Set(nil)
}

// UnsetSharedSecret ensures that no value is present for SharedSecret, not even an explicit nil
func (o *UpdateAppRequestAppStore) UnsetSharedSecret() {
	o.SharedSecret.Unset()
}

func (o UpdateAppRequestAppStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAppRequestAppStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleId) {
		toSerialize["bundle_id"] = o.BundleId
	}
	if o.SharedSecret.IsSet() {
		toSerialize["shared_secret"] = o.SharedSecret.Get()
	}
	return toSerialize, nil
}

type NullableUpdateAppRequestAppStore struct {
	value *UpdateAppRequestAppStore
	isSet bool
}

func (v NullableUpdateAppRequestAppStore) Get() *UpdateAppRequestAppStore {
	return v.value
}

func (v *NullableUpdateAppRequestAppStore) Set(val *UpdateAppRequestAppStore) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAppRequestAppStore) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAppRequestAppStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAppRequestAppStore(val *UpdateAppRequestAppStore) *NullableUpdateAppRequestAppStore {
	return &NullableUpdateAppRequestAppStore{value: val, isSet: true}
}

func (v NullableUpdateAppRequestAppStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAppRequestAppStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


