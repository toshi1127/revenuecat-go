/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transfer{}

// Transfer struct for Transfer
type Transfer struct {
	SourceCustomer Customer `json:"source_customer"`
	TargetCustomer Customer `json:"target_customer"`
}

type _Transfer Transfer

// NewTransfer instantiates a new Transfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfer(sourceCustomer Customer, targetCustomer Customer) *Transfer {
	this := Transfer{}
	this.SourceCustomer = sourceCustomer
	this.TargetCustomer = targetCustomer
	return &this
}

// NewTransferWithDefaults instantiates a new Transfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferWithDefaults() *Transfer {
	this := Transfer{}
	return &this
}

// GetSourceCustomer returns the SourceCustomer field value
func (o *Transfer) GetSourceCustomer() Customer {
	if o == nil {
		var ret Customer
		return ret
	}

	return o.SourceCustomer
}

// GetSourceCustomerOk returns a tuple with the SourceCustomer field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetSourceCustomerOk() (*Customer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceCustomer, true
}

// SetSourceCustomer sets field value
func (o *Transfer) SetSourceCustomer(v Customer) {
	o.SourceCustomer = v
}

// GetTargetCustomer returns the TargetCustomer field value
func (o *Transfer) GetTargetCustomer() Customer {
	if o == nil {
		var ret Customer
		return ret
	}

	return o.TargetCustomer
}

// GetTargetCustomerOk returns a tuple with the TargetCustomer field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTargetCustomerOk() (*Customer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetCustomer, true
}

// SetTargetCustomer sets field value
func (o *Transfer) SetTargetCustomer(v Customer) {
	o.TargetCustomer = v
}

func (o Transfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_customer"] = o.SourceCustomer
	toSerialize["target_customer"] = o.TargetCustomer
	return toSerialize, nil
}

func (o *Transfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_customer",
		"target_customer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransfer := _Transfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransfer)

	if err != nil {
		return err
	}

	*o = Transfer(varTransfer)

	return err
}

type NullableTransfer struct {
	value *Transfer
	isSet bool
}

func (v NullableTransfer) Get() *Transfer {
	return v.value
}

func (v *NullableTransfer) Set(val *Transfer) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfer(val *Transfer) *NullableTransfer {
	return &NullableTransfer{value: val, isSet: true}
}

func (v NullableTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


