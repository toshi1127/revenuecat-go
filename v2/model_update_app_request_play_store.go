/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateAppRequestPlayStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAppRequestPlayStore{}

// UpdateAppRequestPlayStore Play Store type details. Should only be used when type is play_store.
type UpdateAppRequestPlayStore struct {
	// The package name of the app
	PackageName string `json:"package_name"`
}

type _UpdateAppRequestPlayStore UpdateAppRequestPlayStore

// NewUpdateAppRequestPlayStore instantiates a new UpdateAppRequestPlayStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAppRequestPlayStore(packageName string) *UpdateAppRequestPlayStore {
	this := UpdateAppRequestPlayStore{}
	this.PackageName = packageName
	return &this
}

// NewUpdateAppRequestPlayStoreWithDefaults instantiates a new UpdateAppRequestPlayStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAppRequestPlayStoreWithDefaults() *UpdateAppRequestPlayStore {
	this := UpdateAppRequestPlayStore{}
	return &this
}

// GetPackageName returns the PackageName field value
func (o *UpdateAppRequestPlayStore) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *UpdateAppRequestPlayStore) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *UpdateAppRequestPlayStore) SetPackageName(v string) {
	o.PackageName = v
}

func (o UpdateAppRequestPlayStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAppRequestPlayStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["package_name"] = o.PackageName
	return toSerialize, nil
}

func (o *UpdateAppRequestPlayStore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"package_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateAppRequestPlayStore := _UpdateAppRequestPlayStore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateAppRequestPlayStore)

	if err != nil {
		return err
	}

	*o = UpdateAppRequestPlayStore(varUpdateAppRequestPlayStore)

	return err
}

type NullableUpdateAppRequestPlayStore struct {
	value *UpdateAppRequestPlayStore
	isSet bool
}

func (v NullableUpdateAppRequestPlayStore) Get() *UpdateAppRequestPlayStore {
	return v.value
}

func (v *NullableUpdateAppRequestPlayStore) Set(val *UpdateAppRequestPlayStore) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAppRequestPlayStore) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAppRequestPlayStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAppRequestPlayStore(val *UpdateAppRequestPlayStore) *NullableUpdateAppRequestPlayStore {
	return &NullableUpdateAppRequestPlayStore{value: val, isSet: true}
}

func (v NullableUpdateAppRequestPlayStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAppRequestPlayStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


