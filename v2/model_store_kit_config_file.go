/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoreKitConfigFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreKitConfigFile{}

// StoreKitConfigFile Contents of a generated StoreKit config file for an app
type StoreKitConfigFile struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// Contents of the StoreKit config file
	Contents map[string]interface{} `json:"contents"`
}

type _StoreKitConfigFile StoreKitConfigFile

// NewStoreKitConfigFile instantiates a new StoreKitConfigFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreKitConfigFile(object string, contents map[string]interface{}) *StoreKitConfigFile {
	this := StoreKitConfigFile{}
	this.Object = object
	this.Contents = contents
	return &this
}

// NewStoreKitConfigFileWithDefaults instantiates a new StoreKitConfigFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreKitConfigFileWithDefaults() *StoreKitConfigFile {
	this := StoreKitConfigFile{}
	return &this
}

// GetObject returns the Object field value
func (o *StoreKitConfigFile) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *StoreKitConfigFile) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *StoreKitConfigFile) SetObject(v string) {
	o.Object = v
}

// GetContents returns the Contents field value
func (o *StoreKitConfigFile) GetContents() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *StoreKitConfigFile) GetContentsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *StoreKitConfigFile) SetContents(v map[string]interface{}) {
	o.Contents = v
}

func (o StoreKitConfigFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreKitConfigFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["contents"] = o.Contents
	return toSerialize, nil
}

func (o *StoreKitConfigFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"contents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreKitConfigFile := _StoreKitConfigFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoreKitConfigFile)

	if err != nil {
		return err
	}

	*o = StoreKitConfigFile(varStoreKitConfigFile)

	return err
}

type NullableStoreKitConfigFile struct {
	value *StoreKitConfigFile
	isSet bool
}

func (v NullableStoreKitConfigFile) Get() *StoreKitConfigFile {
	return v.value
}

func (v *NullableStoreKitConfigFile) Set(val *StoreKitConfigFile) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreKitConfigFile) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreKitConfigFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreKitConfigFile(val *StoreKitConfigFile) *NullableStoreKitConfigFile {
	return &NullableStoreKitConfigFile{value: val, isSet: true}
}

func (v NullableStoreKitConfigFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreKitConfigFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


