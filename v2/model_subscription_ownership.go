/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// SubscriptionOwnership - Ownership of the subscription
type SubscriptionOwnership struct {
	Ownership *Ownership
}

// OwnershipAsSubscriptionOwnership is a convenience function that returns Ownership wrapped in SubscriptionOwnership
func OwnershipAsSubscriptionOwnership(v *Ownership) SubscriptionOwnership {
	return SubscriptionOwnership{
		Ownership: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionOwnership) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Ownership
	err = newStrictDecoder(data).Decode(&dst.Ownership)
	if err == nil {
		jsonOwnership, _ := json.Marshal(dst.Ownership)
		if string(jsonOwnership) == "{}" { // empty struct
			dst.Ownership = nil
		} else {
			match++
		}
	} else {
		dst.Ownership = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Ownership = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SubscriptionOwnership)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SubscriptionOwnership)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionOwnership) MarshalJSON() ([]byte, error) {
	if src.Ownership != nil {
		return json.Marshal(&src.Ownership)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionOwnership) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Ownership != nil {
		return obj.Ownership
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionOwnership struct {
	value *SubscriptionOwnership
	isSet bool
}

func (v NullableSubscriptionOwnership) Get() *SubscriptionOwnership {
	return v.value
}

func (v *NullableSubscriptionOwnership) Set(val *SubscriptionOwnership) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionOwnership) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionOwnership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionOwnership(val *SubscriptionOwnership) *NullableSubscriptionOwnership {
	return &NullableSubscriptionOwnership{value: val, isSet: true}
}

func (v NullableSubscriptionOwnership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionOwnership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


