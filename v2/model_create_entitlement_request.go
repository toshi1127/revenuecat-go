/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateEntitlementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEntitlementRequest{}

// CreateEntitlementRequest struct for CreateEntitlementRequest
type CreateEntitlementRequest struct {
	// The identifier of the entitlement
	LookupKey string `json:"lookup_key"`
	// The display name of the entitlement
	DisplayName string `json:"display_name"`
}

type _CreateEntitlementRequest CreateEntitlementRequest

// NewCreateEntitlementRequest instantiates a new CreateEntitlementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEntitlementRequest(lookupKey string, displayName string) *CreateEntitlementRequest {
	this := CreateEntitlementRequest{}
	this.LookupKey = lookupKey
	this.DisplayName = displayName
	return &this
}

// NewCreateEntitlementRequestWithDefaults instantiates a new CreateEntitlementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEntitlementRequestWithDefaults() *CreateEntitlementRequest {
	this := CreateEntitlementRequest{}
	return &this
}

// GetLookupKey returns the LookupKey field value
func (o *CreateEntitlementRequest) GetLookupKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value
// and a boolean to check if the value has been set.
func (o *CreateEntitlementRequest) GetLookupKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LookupKey, true
}

// SetLookupKey sets field value
func (o *CreateEntitlementRequest) SetLookupKey(v string) {
	o.LookupKey = v
}

// GetDisplayName returns the DisplayName field value
func (o *CreateEntitlementRequest) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CreateEntitlementRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CreateEntitlementRequest) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o CreateEntitlementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEntitlementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lookup_key"] = o.LookupKey
	toSerialize["display_name"] = o.DisplayName
	return toSerialize, nil
}

func (o *CreateEntitlementRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lookup_key",
		"display_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateEntitlementRequest := _CreateEntitlementRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateEntitlementRequest)

	if err != nil {
		return err
	}

	*o = CreateEntitlementRequest(varCreateEntitlementRequest)

	return err
}

type NullableCreateEntitlementRequest struct {
	value *CreateEntitlementRequest
	isSet bool
}

func (v NullableCreateEntitlementRequest) Get() *CreateEntitlementRequest {
	return v.value
}

func (v *NullableCreateEntitlementRequest) Set(val *CreateEntitlementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEntitlementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEntitlementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEntitlementRequest(val *CreateEntitlementRequest) *NullableCreateEntitlementRequest {
	return &NullableCreateEntitlementRequest{value: val, isSet: true}
}

func (v NullableCreateEntitlementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEntitlementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


