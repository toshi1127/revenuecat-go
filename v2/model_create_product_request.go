/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateProductRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProductRequest{}

// CreateProductRequest struct for CreateProductRequest
type CreateProductRequest struct {
	// The store identifier of the product. - For Apple App Store products this is the product ID of the subscription or in-app product. - For Google's Play Store, it should follow the format 'productId:basePlanId' for subscription products and SKU for one-time purchase products. - For Stripe, the product identifier that always starts with \"prod_\" - For Amazon, if it's a subscription, the term SKU of the subscription. If it's a one-time purchase, the SKU of the product. - For Roku, this is the product identifier of the subscription or one-time purchase product. 
	StoreIdentifier string `json:"store_identifier"`
	// The ID of the app
	AppId string `json:"app_id"`
	Type ProductType `json:"type"`
	// The display name of the product
	DisplayName NullableString `json:"display_name,omitempty"`
}

type _CreateProductRequest CreateProductRequest

// NewCreateProductRequest instantiates a new CreateProductRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProductRequest(storeIdentifier string, appId string, type_ ProductType) *CreateProductRequest {
	this := CreateProductRequest{}
	this.StoreIdentifier = storeIdentifier
	this.AppId = appId
	this.Type = type_
	return &this
}

// NewCreateProductRequestWithDefaults instantiates a new CreateProductRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProductRequestWithDefaults() *CreateProductRequest {
	this := CreateProductRequest{}
	return &this
}

// GetStoreIdentifier returns the StoreIdentifier field value
func (o *CreateProductRequest) GetStoreIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreIdentifier
}

// GetStoreIdentifierOk returns a tuple with the StoreIdentifier field value
// and a boolean to check if the value has been set.
func (o *CreateProductRequest) GetStoreIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreIdentifier, true
}

// SetStoreIdentifier sets field value
func (o *CreateProductRequest) SetStoreIdentifier(v string) {
	o.StoreIdentifier = v
}

// GetAppId returns the AppId field value
func (o *CreateProductRequest) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *CreateProductRequest) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *CreateProductRequest) SetAppId(v string) {
	o.AppId = v
}

// GetType returns the Type field value
func (o *CreateProductRequest) GetType() ProductType {
	if o == nil {
		var ret ProductType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateProductRequest) GetTypeOk() (*ProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateProductRequest) SetType(v ProductType) {
	o.Type = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateProductRequest) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *CreateProductRequest) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *CreateProductRequest) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *CreateProductRequest) UnsetDisplayName() {
	o.DisplayName.Unset()
}

func (o CreateProductRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProductRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["store_identifier"] = o.StoreIdentifier
	toSerialize["app_id"] = o.AppId
	toSerialize["type"] = o.Type
	if o.DisplayName.IsSet() {
		toSerialize["display_name"] = o.DisplayName.Get()
	}
	return toSerialize, nil
}

func (o *CreateProductRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"store_identifier",
		"app_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProductRequest := _CreateProductRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateProductRequest)

	if err != nil {
		return err
	}

	*o = CreateProductRequest(varCreateProductRequest)

	return err
}

type NullableCreateProductRequest struct {
	value *CreateProductRequest
	isSet bool
}

func (v NullableCreateProductRequest) Get() *CreateProductRequest {
	return v.value
}

func (v *NullableCreateProductRequest) Set(val *CreateProductRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProductRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProductRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProductRequest(val *CreateProductRequest) *NullableCreateProductRequest {
	return &NullableCreateProductRequest{value: val, isSet: true}
}

func (v NullableCreateProductRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProductRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


