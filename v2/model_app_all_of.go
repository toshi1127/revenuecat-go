/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// AppAllOf struct for AppAllOf
type AppAllOf struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The id of the app
	Id string `json:"id"`
	// The name of the app
	Name string `json:"name"`
	// The date when the app was created in ms since epoch
	CreatedAt int64 `json:"created_at"`
	// The platform of the app
	Type string `json:"type"`
	// The id of the project
	ProjectId string `json:"project_id"`
}

// NewAppAllOf instantiates a new AppAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppAllOf(object string, id string, name string, createdAt int64, type_ string, projectId string) *AppAllOf {
	this := AppAllOf{}
	this.Object = object
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	this.Type = type_
	this.ProjectId = projectId
	return &this
}

// NewAppAllOfWithDefaults instantiates a new AppAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppAllOfWithDefaults() *AppAllOf {
	this := AppAllOf{}
	return &this
}

// GetObject returns the Object field value
func (o *AppAllOf) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *AppAllOf) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *AppAllOf) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *AppAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppAllOf) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AppAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppAllOf) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AppAllOf) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AppAllOf) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AppAllOf) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetType returns the Type field value
func (o *AppAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AppAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AppAllOf) SetType(v string) {
	o.Type = v
}

// GetProjectId returns the ProjectId field value
func (o *AppAllOf) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *AppAllOf) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *AppAllOf) SetProjectId(v string) {
	o.ProjectId = v
}

func (o AppAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["project_id"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableAppAllOf struct {
	value *AppAllOf
	isSet bool
}

func (v NullableAppAllOf) Get() *AppAllOf {
	return v.value
}

func (v *NullableAppAllOf) Set(val *AppAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAppAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAppAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppAllOf(val *AppAllOf) *NullableAppAllOf {
	return &NullableAppAllOf{value: val, isSet: true}
}

func (v NullableAppAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


