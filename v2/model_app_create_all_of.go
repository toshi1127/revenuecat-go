/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package revenuecat

import (
	"encoding/json"
)

// AppCreateAllOf struct for AppCreateAllOf
type AppCreateAllOf struct {
	// The name of the app
	Name string `json:"name"`
	// The platform of the app. Mac App Store is disabled by default. See [Legacy Mac Apps](https://www.revenuecat.com/docs/legacy-mac-apps) for more details. 
	Type string `json:"type"`
}

// NewAppCreateAllOf instantiates a new AppCreateAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppCreateAllOf(name string, type_ string) *AppCreateAllOf {
	this := AppCreateAllOf{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewAppCreateAllOfWithDefaults instantiates a new AppCreateAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppCreateAllOfWithDefaults() *AppCreateAllOf {
	this := AppCreateAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *AppCreateAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppCreateAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppCreateAllOf) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *AppCreateAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AppCreateAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AppCreateAllOf) SetType(v string) {
	o.Type = v
}

func (o AppCreateAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAppCreateAllOf struct {
	value *AppCreateAllOf
	isSet bool
}

func (v NullableAppCreateAllOf) Get() *AppCreateAllOf {
	return v.value
}

func (v *NullableAppCreateAllOf) Set(val *AppCreateAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAppCreateAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAppCreateAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppCreateAllOf(val *AppCreateAllOf) *NullableAppCreateAllOf {
	return &NullableAppCreateAllOf{value: val, isSet: true}
}

func (v NullableAppCreateAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppCreateAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


