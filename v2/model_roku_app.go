/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RokuApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RokuApp{}

// RokuApp struct for RokuApp
type RokuApp struct {
	Roku *RokuAppRoku `json:"roku,omitempty"`
}

// NewRokuApp instantiates a new RokuApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRokuApp() *RokuApp {
	this := RokuApp{}
	return &this
}

// NewRokuAppWithDefaults instantiates a new RokuApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRokuAppWithDefaults() *RokuApp {
	this := RokuApp{}
	return &this
}

// GetRoku returns the Roku field value if set, zero value otherwise.
func (o *RokuApp) GetRoku() RokuAppRoku {
	if o == nil || IsNil(o.Roku) {
		var ret RokuAppRoku
		return ret
	}
	return *o.Roku
}

// GetRokuOk returns a tuple with the Roku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RokuApp) GetRokuOk() (*RokuAppRoku, bool) {
	if o == nil || IsNil(o.Roku) {
		return nil, false
	}
	return o.Roku, true
}

// HasRoku returns a boolean if a field has been set.
func (o *RokuApp) HasRoku() bool {
	if o != nil && !IsNil(o.Roku) {
		return true
	}

	return false
}

// SetRoku gets a reference to the given RokuAppRoku and assigns it to the Roku field.
func (o *RokuApp) SetRoku(v RokuAppRoku) {
	o.Roku = &v
}

func (o RokuApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RokuApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roku) {
		toSerialize["roku"] = o.Roku
	}
	return toSerialize, nil
}

type NullableRokuApp struct {
	value *RokuApp
	isSet bool
}

func (v NullableRokuApp) Get() *RokuApp {
	return v.value
}

func (v *NullableRokuApp) Set(val *RokuApp) {
	v.value = val
	v.isSet = true
}

func (v NullableRokuApp) IsSet() bool {
	return v.isSet
}

func (v *NullableRokuApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRokuApp(val *RokuApp) *NullableRokuApp {
	return &NullableRokuApp{value: val, isSet: true}
}

func (v NullableRokuApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRokuApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


