/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Product type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Product{}

// Product struct for Product
type Product struct {
	// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
	Object string `json:"object"`
	// The id of the product
	Id string `json:"id"`
	// The store product identifier
	StoreIdentifier string `json:"store_identifier"`
	Type ProductType `json:"type"`
	Subscription NullableSubscriptionProduct `json:"subscription,omitempty"`
	OneTime NullableOneTimeProduct `json:"one_time,omitempty"`
	// The date when the product was created in ms since epoch
	CreatedAt int64 `json:"created_at"`
	// The id of the app
	AppId string `json:"app_id"`
	App *App `json:"app,omitempty"`
	// The display name of the product
	DisplayName NullableString `json:"display_name"`
}

type _Product Product

// NewProduct instantiates a new Product object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct(object string, id string, storeIdentifier string, type_ ProductType, createdAt int64, appId string, displayName NullableString) *Product {
	this := Product{}
	this.Object = object
	this.Id = id
	this.StoreIdentifier = storeIdentifier
	this.Type = type_
	this.CreatedAt = createdAt
	this.AppId = appId
	this.DisplayName = displayName
	return &this
}

// NewProductWithDefaults instantiates a new Product object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductWithDefaults() *Product {
	this := Product{}
	return &this
}

// GetObject returns the Object field value
func (o *Product) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Product) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Product) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Product) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Product) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Product) SetId(v string) {
	o.Id = v
}

// GetStoreIdentifier returns the StoreIdentifier field value
func (o *Product) GetStoreIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreIdentifier
}

// GetStoreIdentifierOk returns a tuple with the StoreIdentifier field value
// and a boolean to check if the value has been set.
func (o *Product) GetStoreIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreIdentifier, true
}

// SetStoreIdentifier sets field value
func (o *Product) SetStoreIdentifier(v string) {
	o.StoreIdentifier = v
}

// GetType returns the Type field value
func (o *Product) GetType() ProductType {
	if o == nil {
		var ret ProductType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Product) GetTypeOk() (*ProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Product) SetType(v ProductType) {
	o.Type = v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Product) GetSubscription() SubscriptionProduct {
	if o == nil || IsNil(o.Subscription.Get()) {
		var ret SubscriptionProduct
		return ret
	}
	return *o.Subscription.Get()
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Product) GetSubscriptionOk() (*SubscriptionProduct, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscription.Get(), o.Subscription.IsSet()
}

// HasSubscription returns a boolean if a field has been set.
func (o *Product) HasSubscription() bool {
	if o != nil && o.Subscription.IsSet() {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given NullableSubscriptionProduct and assigns it to the Subscription field.
func (o *Product) SetSubscription(v SubscriptionProduct) {
	o.Subscription.Set(&v)
}
// SetSubscriptionNil sets the value for Subscription to be an explicit nil
func (o *Product) SetSubscriptionNil() {
	o.Subscription.Set(nil)
}

// UnsetSubscription ensures that no value is present for Subscription, not even an explicit nil
func (o *Product) UnsetSubscription() {
	o.Subscription.Unset()
}

// GetOneTime returns the OneTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Product) GetOneTime() OneTimeProduct {
	if o == nil || IsNil(o.OneTime.Get()) {
		var ret OneTimeProduct
		return ret
	}
	return *o.OneTime.Get()
}

// GetOneTimeOk returns a tuple with the OneTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Product) GetOneTimeOk() (*OneTimeProduct, bool) {
	if o == nil {
		return nil, false
	}
	return o.OneTime.Get(), o.OneTime.IsSet()
}

// HasOneTime returns a boolean if a field has been set.
func (o *Product) HasOneTime() bool {
	if o != nil && o.OneTime.IsSet() {
		return true
	}

	return false
}

// SetOneTime gets a reference to the given NullableOneTimeProduct and assigns it to the OneTime field.
func (o *Product) SetOneTime(v OneTimeProduct) {
	o.OneTime.Set(&v)
}
// SetOneTimeNil sets the value for OneTime to be an explicit nil
func (o *Product) SetOneTimeNil() {
	o.OneTime.Set(nil)
}

// UnsetOneTime ensures that no value is present for OneTime, not even an explicit nil
func (o *Product) UnsetOneTime() {
	o.OneTime.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *Product) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Product) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Product) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetAppId returns the AppId field value
func (o *Product) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *Product) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *Product) SetAppId(v string) {
	o.AppId = v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *Product) GetApp() App {
	if o == nil || IsNil(o.App) {
		var ret App
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetAppOk() (*App, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *Product) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given App and assigns it to the App field.
func (o *Product) SetApp(v App) {
	o.App = &v
}

// GetDisplayName returns the DisplayName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Product) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Product) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// SetDisplayName sets field value
func (o *Product) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

func (o Product) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Product) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["store_identifier"] = o.StoreIdentifier
	toSerialize["type"] = o.Type
	if o.Subscription.IsSet() {
		toSerialize["subscription"] = o.Subscription.Get()
	}
	if o.OneTime.IsSet() {
		toSerialize["one_time"] = o.OneTime.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["app_id"] = o.AppId
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	toSerialize["display_name"] = o.DisplayName.Get()
	return toSerialize, nil
}

func (o *Product) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"store_identifier",
		"type",
		"created_at",
		"app_id",
		"display_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProduct := _Product{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProduct)

	if err != nil {
		return err
	}

	*o = Product(varProduct)

	return err
}

type NullableProduct struct {
	value *Product
	isSet bool
}

func (v NullableProduct) Get() *Product {
	return v.value
}

func (v *NullableProduct) Set(val *Product) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct(val *Product) *NullableProduct {
	return &NullableProduct{value: val, isSet: true}
}

func (v NullableProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


