/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Offering type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Offering{}

// Offering struct for Offering
type Offering struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The id of the offering
	Id string `json:"id"`
	// A custom identifier of the entitlement
	LookupKey string `json:"lookup_key"`
	// The display name of the offering
	DisplayName string `json:"display_name"`
	// Indicates if the offering is the current offering
	IsCurrent bool `json:"is_current"`
	// The date the offering was created at in ms since epoch
	CreatedAt int64 `json:"created_at"`
	// ID of the project to which the offering belongs
	ProjectId string `json:"project_id"`
	// Custom metadata of the offering
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Packages NullablePackageList `json:"packages,omitempty"`
}

type _Offering Offering

// NewOffering instantiates a new Offering object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffering(object string, id string, lookupKey string, displayName string, isCurrent bool, createdAt int64, projectId string) *Offering {
	this := Offering{}
	this.Object = object
	this.Id = id
	this.LookupKey = lookupKey
	this.DisplayName = displayName
	this.IsCurrent = isCurrent
	this.CreatedAt = createdAt
	this.ProjectId = projectId
	return &this
}

// NewOfferingWithDefaults instantiates a new Offering object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferingWithDefaults() *Offering {
	this := Offering{}
	return &this
}

// GetObject returns the Object field value
func (o *Offering) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Offering) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Offering) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Offering) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Offering) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Offering) SetId(v string) {
	o.Id = v
}

// GetLookupKey returns the LookupKey field value
func (o *Offering) GetLookupKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value
// and a boolean to check if the value has been set.
func (o *Offering) GetLookupKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LookupKey, true
}

// SetLookupKey sets field value
func (o *Offering) SetLookupKey(v string) {
	o.LookupKey = v
}

// GetDisplayName returns the DisplayName field value
func (o *Offering) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Offering) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Offering) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetIsCurrent returns the IsCurrent field value
func (o *Offering) GetIsCurrent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCurrent
}

// GetIsCurrentOk returns a tuple with the IsCurrent field value
// and a boolean to check if the value has been set.
func (o *Offering) GetIsCurrentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCurrent, true
}

// SetIsCurrent sets field value
func (o *Offering) SetIsCurrent(v bool) {
	o.IsCurrent = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Offering) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Offering) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Offering) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetProjectId returns the ProjectId field value
func (o *Offering) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Offering) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Offering) SetProjectId(v string) {
	o.ProjectId = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Offering) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Offering) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Offering) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Offering) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPackages returns the Packages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Offering) GetPackages() PackageList {
	if o == nil || IsNil(o.Packages.Get()) {
		var ret PackageList
		return ret
	}
	return *o.Packages.Get()
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Offering) GetPackagesOk() (*PackageList, bool) {
	if o == nil {
		return nil, false
	}
	return o.Packages.Get(), o.Packages.IsSet()
}

// HasPackages returns a boolean if a field has been set.
func (o *Offering) HasPackages() bool {
	if o != nil && o.Packages.IsSet() {
		return true
	}

	return false
}

// SetPackages gets a reference to the given NullablePackageList and assigns it to the Packages field.
func (o *Offering) SetPackages(v PackageList) {
	o.Packages.Set(&v)
}
// SetPackagesNil sets the value for Packages to be an explicit nil
func (o *Offering) SetPackagesNil() {
	o.Packages.Set(nil)
}

// UnsetPackages ensures that no value is present for Packages, not even an explicit nil
func (o *Offering) UnsetPackages() {
	o.Packages.Unset()
}

func (o Offering) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Offering) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["lookup_key"] = o.LookupKey
	toSerialize["display_name"] = o.DisplayName
	toSerialize["is_current"] = o.IsCurrent
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["project_id"] = o.ProjectId
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Packages.IsSet() {
		toSerialize["packages"] = o.Packages.Get()
	}
	return toSerialize, nil
}

func (o *Offering) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"lookup_key",
		"display_name",
		"is_current",
		"created_at",
		"project_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOffering := _Offering{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOffering)

	if err != nil {
		return err
	}

	*o = Offering(varOffering)

	return err
}

type NullableOffering struct {
	value *Offering
	isSet bool
}

func (v NullableOffering) Get() *Offering {
	return v.value
}

func (v *NullableOffering) Set(val *Offering) {
	v.value = val
	v.isSet = true
}

func (v NullableOffering) IsSet() bool {
	return v.isSet
}

func (v *NullableOffering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffering(val *Offering) *NullableOffering {
	return &NullableOffering{value: val, isSet: true}
}

func (v NullableOffering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


