/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransferCustomerDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferCustomerDataRequest{}

// TransferCustomerDataRequest struct for TransferCustomerDataRequest
type TransferCustomerDataRequest struct {
	// The ID of the customer to whom the subscriptions and one-time purchases will be transferred.
	TargetCustomerId string `json:"target_customer_id"`
	// Optional. The IDs of the apps to filter the transfer by. When specified, only purchases and subscriptions associated with these apps will be transferred.
	AppIds []string `json:"app_ids,omitempty"`
}

type _TransferCustomerDataRequest TransferCustomerDataRequest

// NewTransferCustomerDataRequest instantiates a new TransferCustomerDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferCustomerDataRequest(targetCustomerId string) *TransferCustomerDataRequest {
	this := TransferCustomerDataRequest{}
	this.TargetCustomerId = targetCustomerId
	return &this
}

// NewTransferCustomerDataRequestWithDefaults instantiates a new TransferCustomerDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferCustomerDataRequestWithDefaults() *TransferCustomerDataRequest {
	this := TransferCustomerDataRequest{}
	return &this
}

// GetTargetCustomerId returns the TargetCustomerId field value
func (o *TransferCustomerDataRequest) GetTargetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetCustomerId
}

// GetTargetCustomerIdOk returns a tuple with the TargetCustomerId field value
// and a boolean to check if the value has been set.
func (o *TransferCustomerDataRequest) GetTargetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetCustomerId, true
}

// SetTargetCustomerId sets field value
func (o *TransferCustomerDataRequest) SetTargetCustomerId(v string) {
	o.TargetCustomerId = v
}

// GetAppIds returns the AppIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransferCustomerDataRequest) GetAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferCustomerDataRequest) GetAppIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppIds) {
		return nil, false
	}
	return o.AppIds, true
}

// HasAppIds returns a boolean if a field has been set.
func (o *TransferCustomerDataRequest) HasAppIds() bool {
	if o != nil && !IsNil(o.AppIds) {
		return true
	}

	return false
}

// SetAppIds gets a reference to the given []string and assigns it to the AppIds field.
func (o *TransferCustomerDataRequest) SetAppIds(v []string) {
	o.AppIds = v
}

func (o TransferCustomerDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferCustomerDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_customer_id"] = o.TargetCustomerId
	if o.AppIds != nil {
		toSerialize["app_ids"] = o.AppIds
	}
	return toSerialize, nil
}

func (o *TransferCustomerDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_customer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferCustomerDataRequest := _TransferCustomerDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferCustomerDataRequest)

	if err != nil {
		return err
	}

	*o = TransferCustomerDataRequest(varTransferCustomerDataRequest)

	return err
}

type NullableTransferCustomerDataRequest struct {
	value *TransferCustomerDataRequest
	isSet bool
}

func (v NullableTransferCustomerDataRequest) Get() *TransferCustomerDataRequest {
	return v.value
}

func (v *NullableTransferCustomerDataRequest) Set(val *TransferCustomerDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferCustomerDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferCustomerDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferCustomerDataRequest(val *TransferCustomerDataRequest) *NullableTransferCustomerDataRequest {
	return &NullableTransferCustomerDataRequest{value: val, isSet: true}
}

func (v NullableTransferCustomerDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferCustomerDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


