/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package revenuecat

import (
	"encoding/json"
	"fmt"
)

// SubscriptionTotalRevenueInUsd - Total revenue generated by a subscription in USD
type SubscriptionTotalRevenueInUsd struct {
	MonetaryAmount *MonetaryAmount
}

// MonetaryAmountAsSubscriptionTotalRevenueInUsd is a convenience function that returns MonetaryAmount wrapped in SubscriptionTotalRevenueInUsd
func MonetaryAmountAsSubscriptionTotalRevenueInUsd(v *MonetaryAmount) SubscriptionTotalRevenueInUsd {
	return SubscriptionTotalRevenueInUsd{
		MonetaryAmount: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionTotalRevenueInUsd) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MonetaryAmount
	err = newStrictDecoder(data).Decode(&dst.MonetaryAmount)
	if err == nil {
		jsonMonetaryAmount, _ := json.Marshal(dst.MonetaryAmount)
		if string(jsonMonetaryAmount) == "{}" { // empty struct
			dst.MonetaryAmount = nil
		} else {
			match++
		}
	} else {
		dst.MonetaryAmount = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MonetaryAmount = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SubscriptionTotalRevenueInUsd)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SubscriptionTotalRevenueInUsd)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionTotalRevenueInUsd) MarshalJSON() ([]byte, error) {
	if src.MonetaryAmount != nil {
		return json.Marshal(&src.MonetaryAmount)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionTotalRevenueInUsd) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MonetaryAmount != nil {
		return obj.MonetaryAmount
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionTotalRevenueInUsd struct {
	value *SubscriptionTotalRevenueInUsd
	isSet bool
}

func (v NullableSubscriptionTotalRevenueInUsd) Get() *SubscriptionTotalRevenueInUsd {
	return v.value
}

func (v *NullableSubscriptionTotalRevenueInUsd) Set(val *SubscriptionTotalRevenueInUsd) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionTotalRevenueInUsd) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionTotalRevenueInUsd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionTotalRevenueInUsd(val *SubscriptionTotalRevenueInUsd) *NullableSubscriptionTotalRevenueInUsd {
	return &NullableSubscriptionTotalRevenueInUsd{value: val, isSet: true}
}

func (v NullableSubscriptionTotalRevenueInUsd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionTotalRevenueInUsd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


