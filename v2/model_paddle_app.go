/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PaddleApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaddleApp{}

// PaddleApp struct for PaddleApp
type PaddleApp struct {
	Paddle *PaddleAppPaddle `json:"paddle,omitempty"`
}

// NewPaddleApp instantiates a new PaddleApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaddleApp() *PaddleApp {
	this := PaddleApp{}
	return &this
}

// NewPaddleAppWithDefaults instantiates a new PaddleApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaddleAppWithDefaults() *PaddleApp {
	this := PaddleApp{}
	return &this
}

// GetPaddle returns the Paddle field value if set, zero value otherwise.
func (o *PaddleApp) GetPaddle() PaddleAppPaddle {
	if o == nil || IsNil(o.Paddle) {
		var ret PaddleAppPaddle
		return ret
	}
	return *o.Paddle
}

// GetPaddleOk returns a tuple with the Paddle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaddleApp) GetPaddleOk() (*PaddleAppPaddle, bool) {
	if o == nil || IsNil(o.Paddle) {
		return nil, false
	}
	return o.Paddle, true
}

// HasPaddle returns a boolean if a field has been set.
func (o *PaddleApp) HasPaddle() bool {
	if o != nil && !IsNil(o.Paddle) {
		return true
	}

	return false
}

// SetPaddle gets a reference to the given PaddleAppPaddle and assigns it to the Paddle field.
func (o *PaddleApp) SetPaddle(v PaddleAppPaddle) {
	o.Paddle = &v
}

func (o PaddleApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaddleApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Paddle) {
		toSerialize["paddle"] = o.Paddle
	}
	return toSerialize, nil
}

type NullablePaddleApp struct {
	value *PaddleApp
	isSet bool
}

func (v NullablePaddleApp) Get() *PaddleApp {
	return v.value
}

func (v *NullablePaddleApp) Set(val *PaddleApp) {
	v.value = val
	v.isSet = true
}

func (v NullablePaddleApp) IsSet() bool {
	return v.isSet
}

func (v *NullablePaddleApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaddleApp(val *PaddleApp) *NullablePaddleApp {
	return &NullablePaddleApp{value: val, isSet: true}
}

func (v NullablePaddleApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaddleApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


