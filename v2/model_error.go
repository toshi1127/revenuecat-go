/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

// Error struct for Error
type Error struct {
	// String representing the object's type. Objects of the same type share the same value.
	Object string `json:"object"`
	// The error type
	Type string `json:"type"`
	// If the error is parameter-specific, the parameter related to the error
	Param NullableString `json:"param,omitempty"`
	// A URL to more information about the error reported
	DocUrl *string `json:"doc_url,omitempty"`
	// A message describing the reason of the error
	Message string `json:"message"`
	// Indicates if the error is retryable or not
	Retryable bool `json:"retryable"`
	// The ms the client should wait before retrying the request. Only present for retryable errors.
	BackoffMs NullableInt32 `json:"backoff_ms,omitempty"`
}

type _Error Error

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(object string, type_ string, message string, retryable bool) *Error {
	this := Error{}
	this.Object = object
	this.Type = type_
	this.Message = message
	this.Retryable = retryable
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetObject returns the Object field value
func (o *Error) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Error) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Error) SetObject(v string) {
	o.Object = v
}

// GetType returns the Type field value
func (o *Error) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Error) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Error) SetType(v string) {
	o.Type = v
}

// GetParam returns the Param field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Error) GetParam() string {
	if o == nil || IsNil(o.Param.Get()) {
		var ret string
		return ret
	}
	return *o.Param.Get()
}

// GetParamOk returns a tuple with the Param field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Error) GetParamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Param.Get(), o.Param.IsSet()
}

// HasParam returns a boolean if a field has been set.
func (o *Error) HasParam() bool {
	if o != nil && o.Param.IsSet() {
		return true
	}

	return false
}

// SetParam gets a reference to the given NullableString and assigns it to the Param field.
func (o *Error) SetParam(v string) {
	o.Param.Set(&v)
}
// SetParamNil sets the value for Param to be an explicit nil
func (o *Error) SetParamNil() {
	o.Param.Set(nil)
}

// UnsetParam ensures that no value is present for Param, not even an explicit nil
func (o *Error) UnsetParam() {
	o.Param.Unset()
}

// GetDocUrl returns the DocUrl field value if set, zero value otherwise.
func (o *Error) GetDocUrl() string {
	if o == nil || IsNil(o.DocUrl) {
		var ret string
		return ret
	}
	return *o.DocUrl
}

// GetDocUrlOk returns a tuple with the DocUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetDocUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DocUrl) {
		return nil, false
	}
	return o.DocUrl, true
}

// HasDocUrl returns a boolean if a field has been set.
func (o *Error) HasDocUrl() bool {
	if o != nil && !IsNil(o.DocUrl) {
		return true
	}

	return false
}

// SetDocUrl gets a reference to the given string and assigns it to the DocUrl field.
func (o *Error) SetDocUrl(v string) {
	o.DocUrl = &v
}

// GetMessage returns the Message field value
func (o *Error) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Error) SetMessage(v string) {
	o.Message = v
}

// GetRetryable returns the Retryable field value
func (o *Error) GetRetryable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Retryable
}

// GetRetryableOk returns a tuple with the Retryable field value
// and a boolean to check if the value has been set.
func (o *Error) GetRetryableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retryable, true
}

// SetRetryable sets field value
func (o *Error) SetRetryable(v bool) {
	o.Retryable = v
}

// GetBackoffMs returns the BackoffMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Error) GetBackoffMs() int32 {
	if o == nil || IsNil(o.BackoffMs.Get()) {
		var ret int32
		return ret
	}
	return *o.BackoffMs.Get()
}

// GetBackoffMsOk returns a tuple with the BackoffMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Error) GetBackoffMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackoffMs.Get(), o.BackoffMs.IsSet()
}

// HasBackoffMs returns a boolean if a field has been set.
func (o *Error) HasBackoffMs() bool {
	if o != nil && o.BackoffMs.IsSet() {
		return true
	}

	return false
}

// SetBackoffMs gets a reference to the given NullableInt32 and assigns it to the BackoffMs field.
func (o *Error) SetBackoffMs(v int32) {
	o.BackoffMs.Set(&v)
}
// SetBackoffMsNil sets the value for BackoffMs to be an explicit nil
func (o *Error) SetBackoffMsNil() {
	o.BackoffMs.Set(nil)
}

// UnsetBackoffMs ensures that no value is present for BackoffMs, not even an explicit nil
func (o *Error) UnsetBackoffMs() {
	o.BackoffMs.Unset()
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["type"] = o.Type
	if o.Param.IsSet() {
		toSerialize["param"] = o.Param.Get()
	}
	if !IsNil(o.DocUrl) {
		toSerialize["doc_url"] = o.DocUrl
	}
	toSerialize["message"] = o.Message
	toSerialize["retryable"] = o.Retryable
	if o.BackoffMs.IsSet() {
		toSerialize["backoff_ms"] = o.BackoffMs.Get()
	}
	return toSerialize, nil
}

func (o *Error) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"type",
		"message",
		"retryable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varError := _Error{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varError)

	if err != nil {
		return err
	}

	*o = Error(varError)

	return err
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


