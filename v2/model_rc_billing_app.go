/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RCBillingApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCBillingApp{}

// RCBillingApp struct for RCBillingApp
type RCBillingApp struct {
	RcBilling *RCBillingAppRcBilling `json:"rc_billing,omitempty"`
}

// NewRCBillingApp instantiates a new RCBillingApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCBillingApp() *RCBillingApp {
	this := RCBillingApp{}
	return &this
}

// NewRCBillingAppWithDefaults instantiates a new RCBillingApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCBillingAppWithDefaults() *RCBillingApp {
	this := RCBillingApp{}
	return &this
}

// GetRcBilling returns the RcBilling field value if set, zero value otherwise.
func (o *RCBillingApp) GetRcBilling() RCBillingAppRcBilling {
	if o == nil || IsNil(o.RcBilling) {
		var ret RCBillingAppRcBilling
		return ret
	}
	return *o.RcBilling
}

// GetRcBillingOk returns a tuple with the RcBilling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCBillingApp) GetRcBillingOk() (*RCBillingAppRcBilling, bool) {
	if o == nil || IsNil(o.RcBilling) {
		return nil, false
	}
	return o.RcBilling, true
}

// HasRcBilling returns a boolean if a field has been set.
func (o *RCBillingApp) HasRcBilling() bool {
	if o != nil && !IsNil(o.RcBilling) {
		return true
	}

	return false
}

// SetRcBilling gets a reference to the given RCBillingAppRcBilling and assigns it to the RcBilling field.
func (o *RCBillingApp) SetRcBilling(v RCBillingAppRcBilling) {
	o.RcBilling = &v
}

func (o RCBillingApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCBillingApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RcBilling) {
		toSerialize["rc_billing"] = o.RcBilling
	}
	return toSerialize, nil
}

type NullableRCBillingApp struct {
	value *RCBillingApp
	isSet bool
}

func (v NullableRCBillingApp) Get() *RCBillingApp {
	return v.value
}

func (v *NullableRCBillingApp) Set(val *RCBillingApp) {
	v.value = val
	v.isSet = true
}

func (v NullableRCBillingApp) IsSet() bool {
	return v.isSet
}

func (v *NullableRCBillingApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCBillingApp(val *RCBillingApp) *NullableRCBillingApp {
	return &NullableRCBillingApp{value: val, isSet: true}
}

func (v NullableRCBillingApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCBillingApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


