/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// RCBillingCurrency ISO 4217 currency code
type RCBillingCurrency string

// List of RCBillingCurrency
const (
	AUD RCBillingCurrency = "AUD"
	CAD RCBillingCurrency = "CAD"
	EUR RCBillingCurrency = "EUR"
	GBP RCBillingCurrency = "GBP"
	JPY RCBillingCurrency = "JPY"
	USD RCBillingCurrency = "USD"
)

// All allowed values of RCBillingCurrency enum
var AllowedRCBillingCurrencyEnumValues = []RCBillingCurrency{
	"AUD",
	"CAD",
	"EUR",
	"GBP",
	"JPY",
	"USD",
}

func (v *RCBillingCurrency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RCBillingCurrency(value)
	for _, existing := range AllowedRCBillingCurrencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RCBillingCurrency", value)
}

// NewRCBillingCurrencyFromValue returns a pointer to a valid RCBillingCurrency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRCBillingCurrencyFromValue(v string) (*RCBillingCurrency, error) {
	ev := RCBillingCurrency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RCBillingCurrency: valid values are %v", v, AllowedRCBillingCurrencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RCBillingCurrency) IsValid() bool {
	for _, existing := range AllowedRCBillingCurrencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RCBillingCurrency value
func (v RCBillingCurrency) Ptr() *RCBillingCurrency {
	return &v
}

type NullableRCBillingCurrency struct {
	value *RCBillingCurrency
	isSet bool
}

func (v NullableRCBillingCurrency) Get() *RCBillingCurrency {
	return v.value
}

func (v *NullableRCBillingCurrency) Set(val *RCBillingCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableRCBillingCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableRCBillingCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCBillingCurrency(val *RCBillingCurrency) *NullableRCBillingCurrency {
	return &NullableRCBillingCurrency{value: val, isSet: true}
}

func (v NullableRCBillingCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCBillingCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

