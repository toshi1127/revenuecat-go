/*
Developer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Ownership the model 'Ownership'
type Ownership string

// List of Ownership
const (
	PURCHASED Ownership = "purchased"
	FAMILY_SHARED Ownership = "family_shared"
)

// All allowed values of Ownership enum
var AllowedOwnershipEnumValues = []Ownership{
	"purchased",
	"family_shared",
}

func (v *Ownership) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Ownership(value)
	for _, existing := range AllowedOwnershipEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Ownership", value)
}

// NewOwnershipFromValue returns a pointer to a valid Ownership
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOwnershipFromValue(v string) (*Ownership, error) {
	ev := Ownership(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Ownership: valid values are %v", v, AllowedOwnershipEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Ownership) IsValid() bool {
	for _, existing := range AllowedOwnershipEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Ownership value
func (v Ownership) Ptr() *Ownership {
	return &v
}

type NullableOwnership struct {
	value *Ownership
	isSet bool
}

func (v NullableOwnership) Get() *Ownership {
	return v.value
}

func (v *NullableOwnership) Set(val *Ownership) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnership) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnership(val *Ownership) *NullableOwnership {
	return &NullableOwnership{value: val, isSet: true}
}

func (v NullableOwnership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

